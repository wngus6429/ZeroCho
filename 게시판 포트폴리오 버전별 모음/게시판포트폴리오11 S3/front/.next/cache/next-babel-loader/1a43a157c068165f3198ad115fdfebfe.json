{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport { useRouter } from \"next/router\";\nimport { LOAD_MY_INFO_REQUEST } from \"../../reducers/user\";\nimport { LOAD_POST_REQUEST } from \"../../reducers/post\";\nimport wrapper from \"../../store/configureStore\";\nimport axios from \"axios\";\nimport { END } from \"redux-saga\";\nimport { Head } from \"next/head\";\nimport AppLayout from \"../../components/AppLayout\";\nimport PostCard from \"../../components/PostCard\";\nimport { useSelector } from \"react-redux\";\n\nconst Post = () => {\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const {\n    singlePost\n  } = useSelector(state => state.post); // if (router.isFallback) {\n  //   //클라이언트사이드 랜더링 할수 있게 기다릴수 잇게 할수 있음\n  //   return <div>로딩중...</div>;\n  // }\n\n  return /*#__PURE__*/_jsxs(AppLayout, {\n    children: [/*#__PURE__*/_jsxs(\"title\", {\n      children: [singlePost.User.nickname, \"\\u69D8\\u306E\\u6295\\u7A3F\"]\n    }), /*#__PURE__*/_jsx(\"meta\", {\n      name: \"description\",\n      content: singlePost.content\n    }), /*#__PURE__*/_jsx(\"meta\", {\n      property: \"og:title\",\n      content: `${singlePost.User.nickname}님의 게시글`\n    }), /*#__PURE__*/_jsx(\"meta\", {\n      property: \"og:description\",\n      content: singlePost.content\n    }), /*#__PURE__*/_jsx(\"meta\", {\n      property: \"og:image\",\n      content: singlePost.Images[0] ? singlePost.Images[0].src : \"https://lcaohost:9000/favicon.png\"\n    }), /*#__PURE__*/_jsx(\"meta\", {\n      property: \"og:url\",\n      content: `https://lcaohost:9000/post/${id}`\n    }), /*#__PURE__*/_jsx(PostCard, {\n      post: singlePost\n    })]\n  });\n}; //export const getStaticProps = wrapper.getStaticProps(async (context) => {\n\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log(\"getServerSideProps start\");\n  console.log(\"context\", context);\n  const cookie = context.req ? context.req.headers.cookie : \"\";\n  axios.defaults.headers.Cookie = \"\";\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POST_REQUEST,\n    data: context.params.id\n  });\n  context.store.dispatch(END); //next redux wrapper에 이렇게 하라고 적혀있음\n\n  console.log(\"getServerSideProps end\");\n  await context.store.sagaTask.toPromise(); //이거는 configurestore에. sagaTask등록한거\n}); //겟스타틱, 겟프롭스안에서는 context.params.id 또는 context.query.id하면 위에 userrouter에 똑같이 접근가능.\n\nexport default Post;","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/portfolio-japanese/prepare/front/pages/post/[id].js"],"names":["React","useRouter","LOAD_MY_INFO_REQUEST","LOAD_POST_REQUEST","wrapper","axios","END","Head","AppLayout","PostCard","useSelector","Post","router","id","query","singlePost","state","post","User","nickname","content","Images","src","getServerSideProps","context","console","log","cookie","req","headers","defaults","Cookie","store","dispatch","type","data","params","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useRouter } from \"next/router\";\r\nimport { LOAD_MY_INFO_REQUEST } from \"../../reducers/user\";\r\nimport { LOAD_POST_REQUEST } from \"../../reducers/post\";\r\nimport wrapper from \"../../store/configureStore\";\r\nimport axios from \"axios\";\r\nimport { END } from \"redux-saga\";\r\nimport { Head } from \"next/head\";\r\nimport AppLayout from \"../../components/AppLayout\";\r\nimport PostCard from \"../../components/PostCard\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Post = () => {\r\n  const router = useRouter();\r\n  const { id } = router.query;\r\n  const { singlePost } = useSelector((state) => state.post);\r\n\r\n  // if (router.isFallback) {\r\n  //   //클라이언트사이드 랜더링 할수 있게 기다릴수 잇게 할수 있음\r\n  //   return <div>로딩중...</div>;\r\n  // }\r\n\r\n  return (\r\n    <AppLayout>\r\n      <title>{singlePost.User.nickname}様の投稿</title>\r\n      <meta name=\"description\" content={singlePost.content} />\r\n      <meta property=\"og:title\" content={`${singlePost.User.nickname}님의 게시글`} />\r\n      <meta property=\"og:description\" content={singlePost.content} />\r\n      <meta\r\n        property=\"og:image\"\r\n        content={singlePost.Images[0] ? singlePost.Images[0].src : \"https://lcaohost:9000/favicon.png\"}\r\n      />\r\n      <meta property=\"og:url\" content={`https://lcaohost:9000/post/${id}`} />\r\n      <PostCard post={singlePost} />\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\n//export const getStaticProps = wrapper.getStaticProps(async (context) => {\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  console.log(\"getServerSideProps start\");\r\n  console.log(\"context\", context);\r\n  const cookie = context.req ? context.req.headers.cookie : \"\";\r\n  axios.defaults.headers.Cookie = \"\";\r\n  if (context.req && cookie) {\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_POST_REQUEST,\r\n    data: context.params.id,\r\n  });\r\n  context.store.dispatch(END); //next redux wrapper에 이렇게 하라고 적혀있음\r\n  console.log(\"getServerSideProps end\");\r\n  await context.store.sagaTask.toPromise(); //이거는 configurestore에. sagaTask등록한거\r\n});\r\n\r\n//겟스타틱, 겟프롭스안에서는 context.params.id 또는 context.query.id하면 위에 userrouter에 똑같이 접근가능.\r\n\r\nexport default Post;\r\n"]},"metadata":{},"sourceType":"module"}