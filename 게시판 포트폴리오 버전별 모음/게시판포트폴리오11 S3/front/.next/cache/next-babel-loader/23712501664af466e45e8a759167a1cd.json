{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\wngus\\\\Documents\\\\GitHub\\\\ZeroCho\\\\nodebird\\\\prepare\\\\front\\\\pages\\\\profile.js\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport Head from \"next/head\";\nimport { useSelector } from \"react-redux\";\nimport Router from \"next/router\";\nimport { END } from \"redux-saga\";\nimport axios from \"axios\";\nimport useSWR from \"swr\";\nimport AppLayout from \"../components/AppLayout\";\nimport NicknameEditForm from \"../components/NicknameEditForm\";\nimport FollowList from \"../components/FollowList\";\nimport { LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\nimport wrapper from \"../store/configureStore\";\n\nconst fetcher = url => axios.get(url, {\n  withCredentials: true\n}).then(result => result.data);\n\nconst Profile = () => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    0: followersLimit,\n    1: setFollowersLimit\n  } = useState(3);\n  const {\n    0: followingsLimit,\n    1: setFollowingsLimit\n  } = useState(3);\n  const {\n    data: followersData,\n    error: followerError\n  } = useSWR(`http://localhost:9000/user/followers?limit=${followersLimit}`, fetcher);\n  const {\n    data: followingsData,\n    error: followingError\n  } = useSWR(`http://localhost:9000/user/followings?limit=${followingsLimit}`, fetcher); //fetcher가 이 주소에 대해 어떻게 가져올지 ㅋ , 앞에 data, error가 없으면 로딩중\n  //둘중 하나가 있으면 성공했거나 실패했거나\n\n  useEffect(() => {\n    if (!(me && me.id)) {\n      Router.push(\"/\");\n    }\n  }, [me && me.id]);\n  const loadMoreFollowings = useCallback(() => {\n    setFollowingsLimit(prev => prev + 3);\n  }, []);\n  const loadMoreFollowers = useCallback(() => {\n    setFollowersLimit(prev => prev + 3);\n  }, []);\n\n  if (!me) {\n    //로그인 안하면 profile페이지 못가게\n    return \"내 정보 로딩중\";\n  }\n\n  if (followerError || followingError) {\n    console.error(followerError || followingError);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uD314\\uB85C\\uC789/\\uD314\\uB85C\\uC6CC \\uB85C\\uB529 \\uC911 \\uC5D0\\uB7EC\\uAC00 \\uBC1C\\uC0DD\\uD569\\uB2C8\\uB2E4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }, this);\n  } // useEffect(() => {\n  //   dispatch({\n  //     type: LOAD_FOLLOWERS_REQUEST,\n  //   });\n  //   dispatch({\n  //     type: LOAD_FOLLOWINGS_REQUEST,\n  //   });\n  // }, []);\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\\uB0B4 \\uD504\\uB85C\\uD544 | NodeBird\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppLayout, {\n      children: [/*#__PURE__*/_jsxDEV(NicknameEditForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FollowList, {\n        header: \"\\uD314\\uB85C\\uC789\",\n        data: followingsData,\n        onClickMore: loadMoreFollowings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FollowList, {\n        header: \"\\uD314\\uB85C\\uC6CC\",\n        data: followersData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; //서버사이드 랜더링 이부분이 알아서 home보다 먼저 실행됨. 그래야 데이터 먼저 채우고 화면이 렌더링\n//매개변수 context , 여긴 프론트서버에서 실행되는거임\n\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log(\"getServerSideProps start\");\n  console.log(\"context\", context); //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  const cookie = context.req ? context.req.headers.cookie : \"\"; //이걸 해야 서버쪽으로 쿠키가 전달이됨\n\n  axios.defaults.headers.Cookie = \"\"; //이걸 해야 서버쪽으로 쿠키가 전달이됨\n\n  if (context.req && cookie) {\n    //서버일때랑 쿠키가 있을때 , 이런게 아니면 위에 \"\" //이렇게 안하면 서버에서 쿠키가 공유되서 다른사람이 내 아이디로 로그인되는\n    axios.defaults.headers.Cookie = cookie;\n  } //저희가 실제로 쿠키를 써서 요청을 보낼때만 잠깐 쿠키를 넣어놧다가 쿠키를 안써서 요청보낼때는 서버에서 공유하고 있는 쿠키를 제거하는 이부분이 제일 중요\n  ////////////////////////////////////////////////////////////////////////////////////////\n\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch(END); //next redux wrapper에 이렇게 하라고 적혀있음\n\n  console.log(\"getServerSideProps end\");\n  await context.store.sagaTask.toPromise(); //이거는 configurestore에. sagaTask등록한거\n}); //서버사이드랜더링이 request가 success될떄까지 기다려주는거\n\nexport default Profile;","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/ZeroCho/nodebird/prepare/front/pages/profile.js"],"names":["React","useEffect","useState","useCallback","Head","useSelector","Router","END","axios","useSWR","AppLayout","NicknameEditForm","FollowList","LOAD_MY_INFO_REQUEST","wrapper","fetcher","url","get","withCredentials","then","result","data","Profile","me","state","user","followersLimit","setFollowersLimit","followingsLimit","setFollowingsLimit","followersData","error","followerError","followingsData","followingError","id","push","loadMoreFollowings","prev","loadMoreFollowers","console","getServerSideProps","context","log","cookie","req","headers","defaults","Cookie","store","dispatch","type","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\r\nimport Head from \"next/head\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Router from \"next/router\";\r\nimport { END } from \"redux-saga\";\r\nimport axios from \"axios\";\r\nimport useSWR from \"swr\";\r\n\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport NicknameEditForm from \"../components/NicknameEditForm\";\r\nimport FollowList from \"../components/FollowList\";\r\nimport { LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\r\nimport wrapper from \"../store/configureStore\";\r\n\r\nconst fetcher = (url) => axios.get(url, { withCredentials: true }).then((result) => result.data);\r\n\r\nconst Profile = () => {\r\n  const { me } = useSelector((state) => state.user);\r\n  const [followersLimit, setFollowersLimit] = useState(3);\r\n  const [followingsLimit, setFollowingsLimit] = useState(3);\r\n\r\n  const { data: followersData, error: followerError } = useSWR(\r\n    `http://localhost:9000/user/followers?limit=${followersLimit}`,\r\n    fetcher\r\n  );\r\n  const { data: followingsData, error: followingError } = useSWR(\r\n    `http://localhost:9000/user/followings?limit=${followingsLimit}`,\r\n    fetcher\r\n  );\r\n  //fetcher가 이 주소에 대해 어떻게 가져올지 ㅋ , 앞에 data, error가 없으면 로딩중\r\n  //둘중 하나가 있으면 성공했거나 실패했거나\r\n\r\n  useEffect(() => {\r\n    if (!(me && me.id)) {\r\n      Router.push(\"/\");\r\n    }\r\n  }, [me && me.id]);\r\n\r\n  const loadMoreFollowings = useCallback(() => {\r\n    setFollowingsLimit((prev) => prev + 3);\r\n  }, []);\r\n  const loadMoreFollowers = useCallback(() => {\r\n    setFollowersLimit((prev) => prev + 3);\r\n  }, []);\r\n\r\n  if (!me) {\r\n    //로그인 안하면 profile페이지 못가게\r\n    return \"내 정보 로딩중\";\r\n  }\r\n  if (followerError || followingError) {\r\n    console.error(followerError || followingError);\r\n    return <div>팔로잉/팔로워 로딩 중 에러가 발생합니다</div>;\r\n  }\r\n\r\n  // useEffect(() => {\r\n  //   dispatch({\r\n  //     type: LOAD_FOLLOWERS_REQUEST,\r\n  //   });\r\n  //   dispatch({\r\n  //     type: LOAD_FOLLOWINGS_REQUEST,\r\n  //   });\r\n  // }, []);\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>내 프로필 | NodeBird</title>\r\n      </Head>\r\n      <AppLayout>\r\n        <NicknameEditForm />\r\n        <FollowList header=\"팔로잉\" data={followingsData} onClickMore={loadMoreFollowings} />\r\n        <FollowList header=\"팔로워\" data={followersData} />\r\n      </AppLayout>\r\n    </>\r\n  );\r\n};\r\n\r\n//서버사이드 랜더링 이부분이 알아서 home보다 먼저 실행됨. 그래야 데이터 먼저 채우고 화면이 렌더링\r\n//매개변수 context , 여긴 프론트서버에서 실행되는거임\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  console.log(\"getServerSideProps start\");\r\n  console.log(\"context\", context);\r\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const cookie = context.req ? context.req.headers.cookie : \"\"; //이걸 해야 서버쪽으로 쿠키가 전달이됨\r\n  axios.defaults.headers.Cookie = \"\"; //이걸 해야 서버쪽으로 쿠키가 전달이됨\r\n  if (context.req && cookie) {\r\n    //서버일때랑 쿠키가 있을때 , 이런게 아니면 위에 \"\" //이렇게 안하면 서버에서 쿠키가 공유되서 다른사람이 내 아이디로 로그인되는\r\n    axios.defaults.headers.Cookie = cookie;\r\n  } //저희가 실제로 쿠키를 써서 요청을 보낼때만 잠깐 쿠키를 넣어놧다가 쿠키를 안써서 요청보낼때는 서버에서 공유하고 있는 쿠키를 제거하는 이부분이 제일 중요\r\n  ////////////////////////////////////////////////////////////////////////////////////////\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch(END); //next redux wrapper에 이렇게 하라고 적혀있음\r\n  console.log(\"getServerSideProps end\");\r\n  await context.store.sagaTask.toPromise(); //이거는 configurestore에. sagaTask등록한거\r\n}); //서버사이드랜더링이 request가 success될떄까지 기다려주는거\r\n\r\nexport default Profile;\r\n"]},"metadata":{},"sourceType":"module"}