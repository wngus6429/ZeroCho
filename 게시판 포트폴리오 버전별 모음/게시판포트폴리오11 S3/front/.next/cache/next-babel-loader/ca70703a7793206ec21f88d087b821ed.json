{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\"; //리덕스 서버사이드랜더링을 위해 하이드레이트 사용\n\nimport user from \"./user\";\nimport post from \"./post\";\nimport { combineReducers } from \"redux\"; // (이전 상태, 액션) => 다음 상태 , combineReducers는 리듀서 합쳐줌\n// HYDRATE를 위해서 index reducer를 추가한 상태 28까지\n\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log(\"HYDRATE\", action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user,\n  post\n}); //user.js든지 post.js 에서 오는거 리덕스가 알아서 해줌\n//액션에 필요한 추가 데이터는 payload라는 이름을 사용함.\n\nexport default rootReducer; // const rootReducer = combineReducers({\n//   index:(state = {}, action) => {\n//   switch (action.type) {\n//     case HYDRATE:\n//       console.log('HYDRATE', action);\n//       return { ...state, ...action.payload };\n//     default:\n//       return state;\n//   }\n// },\n// user,\n// post,\n// });","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/ZeroCho/nodebird/prepare/front/reducers/index.js"],"names":["HYDRATE","user","post","combineReducers","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB,C,CAA8C;;AAC9C,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,eAAT,QAAgC,OAAhC,C,CAEA;AACA;;AACA,MAAMC,WAAW,GAAGD,eAAe,CAAC;AAClCE,EAAAA,KAAK,EAAE,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC7B,YAAQA,MAAM,CAACC,IAAf;AACE,WAAKR,OAAL;AACES,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,+CAAYD,KAAZ,GAAsBC,MAAM,CAACI,OAA7B;;AACF;AACE,eAAOL,KAAP;AALJ;AAOD,GATiC;AAUlCL,EAAAA,IAVkC;AAWlCC,EAAAA;AAXkC,CAAD,CAAnC,C,CAaA;AACA;;AAEA,eAAeE,WAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\"; //리덕스 서버사이드랜더링을 위해 하이드레이트 사용\r\nimport user from \"./user\";\r\nimport post from \"./post\";\r\nimport { combineReducers } from \"redux\";\r\n\r\n// (이전 상태, 액션) => 다음 상태 , combineReducers는 리듀서 합쳐줌\r\n// HYDRATE를 위해서 index reducer를 추가한 상태 28까지\r\nconst rootReducer = combineReducers({\r\n  index: (state = {}, action) => {\r\n    switch (action.type) {\r\n      case HYDRATE:\r\n        console.log(\"HYDRATE\", action);\r\n        return { ...state, ...action.payload };\r\n      default:\r\n        return state;\r\n    }\r\n  },\r\n  user,\r\n  post,\r\n});\r\n//user.js든지 post.js 에서 오는거 리덕스가 알아서 해줌\r\n//액션에 필요한 추가 데이터는 payload라는 이름을 사용함.\r\n\r\nexport default rootReducer;\r\n\r\n// const rootReducer = combineReducers({\r\n//   index:(state = {}, action) => {\r\n//   switch (action.type) {\r\n//     case HYDRATE:\r\n//       console.log('HYDRATE', action);\r\n//       return { ...state, ...action.payload };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// },\r\n// user,\r\n// post,\r\n// });\r\n"]},"metadata":{},"sourceType":"module"}