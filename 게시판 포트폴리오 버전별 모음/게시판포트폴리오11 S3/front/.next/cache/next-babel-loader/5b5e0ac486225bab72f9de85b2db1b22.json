{"ast":null,"code":"import { createWrapper } from \"next-redux-wrapper\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\nimport reducer from \"../reducers\";\nimport rootSaga from \"../sagas\";\n\nvar loggerMiddleware = function loggerMiddleware(_ref) {\n  var dispatch = _ref.dispatch,\n      getState = _ref.getState;\n  return function (next) {\n    return function (action) {\n      console.log(action);\n      return next(action);\n    };\n  };\n}; //action 하기전에 콘솔로그 하는 기능\n\n\nvar configureStore = function configureStore() {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware, loggerMiddleware]; //개발이든 배포든 thunk가 장착됨\n\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : composeWithDevTools(applyMiddleware.apply(void 0, middlewares));\n  var store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n}); //두번째는 옵션 객체, debug를 true로 하는게 개발할떄 편함\n\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/portfolio-japanese/prepare/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAaC,QAAb,QAAaA,QAAb;AAAA,SAA4B,UAACC,IAAD;AAAA,WAAU,UAACC,MAAD,EAAY;AACzEC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,aAAOD,IAAI,CAACC,MAAD,CAAX;AACD,KAHoD;AAAA,GAA5B;AAAA,CAAzB,C,CAGG;;;AAEH,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAMC,cAAc,GAAGX,oBAAoB,EAA3C;AACA,MAAMY,WAAW,GAAG,CAACD,cAAD,EAAiBR,gBAAjB,CAApB,CAF2B,CAG3B;;AACA,MAAMU,QAAQ,GACZ,QACIhB,OAAO,CAACD,eAAe,MAAf,SAAmBgB,WAAnB,CAAD,CADX,GAEIb,mBAAmB,CAACH,eAAe,MAAf,SAAmBgB,WAAnB,CAAD,CAHzB;AAIA,MAAME,KAAK,GAAGhB,WAAW,CAACG,OAAD,EAAUY,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBd,QAAnB,CAAjB;AACA,SAAOY,KAAP;AACD,CAXD;;AAaA,IAAMG,OAAO,GAAGtB,aAAa,CAACe,cAAD,EAAiB;AAC5CQ,EAAAA,KAAK;AADuC,CAAjB,CAA7B,C,CAGA;;AACA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from \"next-redux-wrapper\";\r\nimport { applyMiddleware, compose, createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport reducer from \"../reducers\";\r\nimport rootSaga from \"../sagas\";\r\n\r\nconst loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\r\n  console.log(action);\r\n  return next(action);\r\n}; //action 하기전에 콘솔로그 하는 기능\r\n\r\nconst configureStore = () => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middlewares = [sagaMiddleware, loggerMiddleware];\r\n  //개발이든 배포든 thunk가 장착됨\r\n  const enhancer =\r\n    process.env.NODE_ENV === \"production\"\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : composeWithDevTools(applyMiddleware(...middlewares));\r\n  const store = createStore(reducer, enhancer);\r\n  store.sagaTask = sagaMiddleware.run(rootSaga);\r\n  return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, {\r\n  debug: process.env.NODE_ENV === \"development\",\r\n});\r\n//두번째는 옵션 객체, debug를 true로 하는게 개발할떄 편함\r\nexport default wrapper;\r\n"]},"metadata":{},"sourceType":"module"}