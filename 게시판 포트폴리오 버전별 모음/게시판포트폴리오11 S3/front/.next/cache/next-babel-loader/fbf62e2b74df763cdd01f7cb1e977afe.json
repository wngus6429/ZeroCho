{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\wngus\\\\Documents\\\\GitHub\\\\ZeroCho\\\\nodebird\\\\prepare\\\\front\\\\pages\\\\profile.js\";\nimport React, { useEffect } from \"react\";\nimport Head from \"next/head\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Router from \"next/router\";\nimport { END } from \"redux-saga\";\nimport axios from \"axios\";\nimport AppLayout from \"../components/AppLayout\";\nimport NicknameEditForm from \"../components/NicknameEditForm\";\nimport FollowList from \"../components/FollowList\";\nimport { LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWINGS_REQUEST, LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\nimport wrapper from \"../store/configureStore\";\n\nconst Profile = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  useEffect(() => {\n    dispatch({\n      type: LOAD_FOLLOWERS_REQUEST\n    });\n    dispatch({\n      type: LOAD_FOLLOWINGS_REQUEST\n    });\n  }, []);\n  useEffect(() => {\n    if (!(me && me.id)) {\n      Router.push(\"/\");\n    }\n  }, [me && me.id]);\n\n  if (!me) {\n    //로그인 안하면 profile페이지 못가게\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\\uB0B4 \\uD504\\uB85C\\uD544 | NodeBird\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppLayout, {\n      children: [/*#__PURE__*/_jsxDEV(NicknameEditForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FollowList, {\n        header: \"\\uD314\\uB85C\\uC789\",\n        data: me.Followings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FollowList, {\n        header: \"\\uD314\\uB85C\\uC6CC\",\n        data: me.Followers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; //서버사이드 랜더링 이부분이 알아서 home보다 먼저 실행됨. 그래야 데이터 먼저 채우고 화면이 렌더링\n//매개변수 context , 여긴 프론트서버에서 실행되는거임\n\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log(\"getServerSideProps start\");\n  console.log(\"context\", context); //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  const cookie = context.req ? context.req.headers.cookie : \"\"; //이걸 해야 서버쪽으로 쿠키가 전달이됨\n\n  axios.defaults.headers.Cookie = \"\"; //이걸 해야 서버쪽으로 쿠키가 전달이됨\n\n  if (context.req && cookie) {\n    //서버일때랑 쿠키가 있을때 , 이런게 아니면 위에 \"\" //이렇게 안하면 서버에서 쿠키가 공유되서 다른사람이 내 아이디로 로그인되는\n    axios.defaults.headers.Cookie = cookie;\n  } //저희가 실제로 쿠키를 써서 요청을 보낼때만 잠깐 쿠키를 넣어놧다가 쿠키를 안써서 요청보낼때는 서버에서 공유하고 있는 쿠키를 제거하는 이부분이 제일 중요\n  ////////////////////////////////////////////////////////////////////////////////////////\n\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch(END); //next redux wrapper에 이렇게 하라고 적혀있음\n\n  console.log(\"getServerSideProps end\");\n  await context.store.sagaTask.toPromise(); //이거는 configurestore에. sagaTask등록한거\n}); //서버사이드랜더링이 request가 success될떄까지 기다려주는거\n\nexport default Profile;","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/ZeroCho/nodebird/prepare/front/pages/profile.js"],"names":["React","useEffect","Head","useSelector","useDispatch","Router","END","axios","AppLayout","NicknameEditForm","FollowList","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWINGS_REQUEST","LOAD_MY_INFO_REQUEST","wrapper","Profile","dispatch","me","state","user","type","id","push","Followings","Followers","getServerSideProps","context","console","log","cookie","req","headers","defaults","Cookie","store","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport Head from \"next/head\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Router from \"next/router\";\r\nimport { END } from \"redux-saga\";\r\nimport axios from \"axios\";\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport NicknameEditForm from \"../components/NicknameEditForm\";\r\nimport FollowList from \"../components/FollowList\";\r\nimport { LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWINGS_REQUEST, LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\r\nimport wrapper from \"../store/configureStore\";\r\n\r\nconst Profile = () => {\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state) => state.user);\r\n\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: LOAD_FOLLOWERS_REQUEST,\r\n    });\r\n    dispatch({\r\n      type: LOAD_FOLLOWINGS_REQUEST,\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!(me && me.id)) {\r\n      Router.push(\"/\");\r\n    }\r\n  }, [me && me.id]);\r\n\r\n  if (!me) {\r\n    //로그인 안하면 profile페이지 못가게\r\n    return null;\r\n  }\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>내 프로필 | NodeBird</title>\r\n      </Head>\r\n      <AppLayout>\r\n        <NicknameEditForm />\r\n        <FollowList header=\"팔로잉\" data={me.Followings} />\r\n        <FollowList header=\"팔로워\" data={me.Followers} />\r\n      </AppLayout>\r\n    </>\r\n  );\r\n};\r\n\r\n//서버사이드 랜더링 이부분이 알아서 home보다 먼저 실행됨. 그래야 데이터 먼저 채우고 화면이 렌더링\r\n//매개변수 context , 여긴 프론트서버에서 실행되는거임\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  console.log(\"getServerSideProps start\");\r\n  console.log(\"context\", context);\r\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const cookie = context.req ? context.req.headers.cookie : \"\"; //이걸 해야 서버쪽으로 쿠키가 전달이됨\r\n  axios.defaults.headers.Cookie = \"\"; //이걸 해야 서버쪽으로 쿠키가 전달이됨\r\n  if (context.req && cookie) {\r\n    //서버일때랑 쿠키가 있을때 , 이런게 아니면 위에 \"\" //이렇게 안하면 서버에서 쿠키가 공유되서 다른사람이 내 아이디로 로그인되는\r\n    axios.defaults.headers.Cookie = cookie;\r\n  } //저희가 실제로 쿠키를 써서 요청을 보낼때만 잠깐 쿠키를 넣어놧다가 쿠키를 안써서 요청보낼때는 서버에서 공유하고 있는 쿠키를 제거하는 이부분이 제일 중요\r\n  ////////////////////////////////////////////////////////////////////////////////////////\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch(END); //next redux wrapper에 이렇게 하라고 적혀있음\r\n  console.log(\"getServerSideProps end\");\r\n  await context.store.sagaTask.toPromise(); //이거는 configurestore에. sagaTask등록한거\r\n}); //서버사이드랜더링이 request가 success될떄까지 기다려주는거\r\n\r\nexport default Profile;\r\n"]},"metadata":{},"sourceType":"module"}