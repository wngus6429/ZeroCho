{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport { useRouter } from \"next/router\";\nimport { LOAD_MY_INFO_REQUEST } from \"../../reducers/user\";\nimport { LOAD_POST_REQUEST } from \"../../reducers/post\";\nimport wrapper from \"../../store/configureStore\";\nimport axios from \"axios\";\nimport { END } from \"redux-saga\";\nimport { Head } from \"next/head\";\nimport AppLayout from \"../../components/AppLayout\";\nimport PostCard from \"../../components/PostCard\";\nimport { useSelector } from \"react-redux\";\n\nconst Post = () => {\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const {\n    singlePost\n  } = useSelector(state => state.post); // if (router.isFallback) {\n  //   //클라이언트사이드 랜더링 할수 있게 기다릴수 잇게 할수 있음\n  //   return <div>로딩중...</div>;\n  // }\n\n  return /*#__PURE__*/_jsxs(AppLayout, {\n    children: [/*#__PURE__*/_jsxs(\"title\", {\n      children: [singlePost.User.nickname, \"\\u69D8\\u306E\\u6295\\u7A3F\"]\n    }), /*#__PURE__*/_jsx(\"meta\", {\n      name: \"description\",\n      content: singlePost.content\n    }), /*#__PURE__*/_jsx(\"meta\", {\n      property: \"og:title\",\n      content: `${singlePost.User.nickname}님의 게시글`\n    }), /*#__PURE__*/_jsx(\"meta\", {\n      property: \"og:description\",\n      content: singlePost.content\n    }), /*#__PURE__*/_jsx(\"meta\", {\n      property: \"og:image\",\n      content: singlePost.Images[0] ? singlePost.Images[0].src : \"https://lcaohost:9000/favicon.png\"\n    }), /*#__PURE__*/_jsx(\"meta\", {\n      property: \"og:url\",\n      content: `https://lcaohost:9000/post/${id}`\n    }), /*#__PURE__*/_jsx(PostCard, {\n      post: singlePost\n    })]\n  });\n}; //export const getStaticProps = wrapper.getStaticProps(async (context) => {\n\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log(\"getServerSideProps start\");\n  console.log(\"context\", context);\n  const cookie = context.req ? context.req.headers.cookie : \"\";\n  axios.defaults.headers.Cookie = \"\";\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POST_REQUEST,\n    data: context.params.id\n  });\n  context.store.dispatch(END); //next redux wrapper에 이렇게 하라고 적혀있음\n\n  console.log(\"getServerSideProps end\");\n  await context.store.sagaTask.toPromise(); //이거는 configurestore에. sagaTask등록한거\n}); //겟스타틱, 겟프롭스안에서는 context.params.id 또는 context.query.id하면 위에 userrouter에 똑같이 접근가능.\n\nexport default Post;","map":null,"metadata":{},"sourceType":"module"}