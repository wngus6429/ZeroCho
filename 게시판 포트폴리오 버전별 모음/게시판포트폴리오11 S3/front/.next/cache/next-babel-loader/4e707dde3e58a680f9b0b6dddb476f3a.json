{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\wngus\\\\Documents\\\\GitHub\\\\ZeroCho\\\\nodebird\\\\prepare\\\\front\\\\pages\\\\hashtag\\\\[tag].js\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useRouter } from \"next/router\";\nimport { END } from \"redux-saga\";\nimport axios from \"axios\";\nimport { LOAD_HASHTAG_POSTS_REQUEST } from \"../../reducers/post\";\nimport PostCard from \"../../components/PostCard\";\nimport wrapper from \"../../store/configureStore\";\nimport { LOAD_MY_INFO_REQUEST } from \"../../reducers/user\";\nimport AppLayout from \"../../components/AppLayout\"; // hashtag/[tag]\n\nconst Hashtag = () => {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    tag\n  } = router.query;\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading\n  } = useSelector(state => state.post); // useEffect(() => {\n  //   const onScroll = () => {\n  //     if (\n  //       window.pageYOffset + document.documentElement.clientHeight >\n  //       document.documentElement.scrollHeight - 300\n  //     ) {\n  //       if (hasMorePosts && !loadPostsLoading) {\n  //         dispatch({\n  //           type: LOAD_HASHTAG_POSTS_REQUEST,\n  //           lastId: mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id,\n  //           data: tag,\n  //         });\n  //       }\n  //     }\n  //   };\n  //   window.addEventListener(\"scroll\", onScroll);\n  //   return () => {\n  //     window.removeEventListener(\"scroll\", onScroll);\n  //   };\n  // }, [mainPosts.length, hasMorePosts, tag, loadPostsLoading]);\n\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: mainPosts.map(c => /*#__PURE__*/_jsxDEV(PostCard, {\n      post: c\n    }, c.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}; //og 이런게 카톡이나, 페북이런데 올리면, 미리보기 같은거임\n\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log(context);\n  const cookie = context.req ? context.req.headers.cookie : \"\";\n  axios.defaults.headers.Cookie = \"\";\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_HASHTAG_POSTS_REQUEST,\n    data: context.params.tag\n  });\n  context.store.dispatch(END); //next redux wrapper에 이렇게 하라고 적혀있음\n\n  await context.store.sagaTask.toPromise(); //이거는 configurestore에. sagaTask등록한거\n}); //겟스타틱, 겟프롭스안에서는 context.params.id 또는 context.query.id하면 위에 userrouter에 똑같이 접근가능.\n\nexport default Hashtag;","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/ZeroCho/nodebird/prepare/front/pages/hashtag/[tag].js"],"names":["React","useEffect","useDispatch","useSelector","useRouter","END","axios","LOAD_HASHTAG_POSTS_REQUEST","PostCard","wrapper","LOAD_MY_INFO_REQUEST","AppLayout","Hashtag","dispatch","router","tag","query","mainPosts","hasMorePosts","loadPostsLoading","state","post","map","c","id","getServerSideProps","context","console","log","cookie","req","headers","defaults","Cookie","store","type","data","params","sagaTask","toPromise"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,0BAAT,QAA2C,qBAA3C;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,SAASC,oBAAT,QAAqC,qBAArC;AACA,OAAOC,SAAP,MAAsB,4BAAtB,C,CACA;;AACA,MAAMC,OAAO,GAAG,MAAM;AACpB,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAMY,MAAM,GAAGV,SAAS,EAAxB;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAUD,MAAM,CAACE,KAAvB;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA;AAA3B,MAAgDhB,WAAW,CAAEiB,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAAjE,CAJoB,CAMpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE,QAAC,SAAD;AAAA,cACGJ,SAAS,CAACK,GAAV,CAAeC,CAAD,iBACb,QAAC,QAAD;AAAqB,MAAA,IAAI,EAAEA;AAA3B,OAAeA,CAAC,CAACC,EAAjB;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAlCD,C,CAmCA;;;AAEA,OAAO,MAAMC,kBAAkB,GAAGhB,OAAO,CAACgB,kBAAR,CAA2B,MAAOC,OAAP,IAAmB;AAC9EC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,QAAMG,MAAM,GAAGH,OAAO,CAACI,GAAR,GAAcJ,OAAO,CAACI,GAAR,CAAYC,OAAZ,CAAoBF,MAAlC,GAA2C,EAA1D;AACAvB,EAAAA,KAAK,CAAC0B,QAAN,CAAeD,OAAf,CAAuBE,MAAvB,GAAgC,EAAhC;;AACA,MAAIP,OAAO,CAACI,GAAR,IAAeD,MAAnB,EAA2B;AACzBvB,IAAAA,KAAK,CAAC0B,QAAN,CAAeD,OAAf,CAAuBE,MAAvB,GAAgCJ,MAAhC;AACD;;AACDH,EAAAA,OAAO,CAACQ,KAAR,CAAcrB,QAAd,CAAuB;AACrBsB,IAAAA,IAAI,EAAEzB;AADe,GAAvB;AAGAgB,EAAAA,OAAO,CAACQ,KAAR,CAAcrB,QAAd,CAAuB;AACrBsB,IAAAA,IAAI,EAAE5B,0BADe;AAErB6B,IAAAA,IAAI,EAAEV,OAAO,CAACW,MAAR,CAAetB;AAFA,GAAvB;AAIAW,EAAAA,OAAO,CAACQ,KAAR,CAAcrB,QAAd,CAAuBR,GAAvB,EAd8E,CAcjD;;AAC7B,QAAMqB,OAAO,CAACQ,KAAR,CAAcI,QAAd,CAAuBC,SAAvB,EAAN,CAf8E,CAepC;AAC3C,CAhBiC,CAA3B,C,CAkBP;;AAEA,eAAe3B,OAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useRouter } from \"next/router\";\r\nimport { END } from \"redux-saga\";\r\nimport axios from \"axios\";\r\nimport { LOAD_HASHTAG_POSTS_REQUEST } from \"../../reducers/post\";\r\nimport PostCard from \"../../components/PostCard\";\r\nimport wrapper from \"../../store/configureStore\";\r\nimport { LOAD_MY_INFO_REQUEST } from \"../../reducers/user\";\r\nimport AppLayout from \"../../components/AppLayout\";\r\n// hashtag/[tag]\r\nconst Hashtag = () => {\r\n  const dispatch = useDispatch();\r\n  const router = useRouter();\r\n  const { tag } = router.query;\r\n  const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector((state) => state.post);\r\n\r\n  // useEffect(() => {\r\n  //   const onScroll = () => {\r\n  //     if (\r\n  //       window.pageYOffset + document.documentElement.clientHeight >\r\n  //       document.documentElement.scrollHeight - 300\r\n  //     ) {\r\n  //       if (hasMorePosts && !loadPostsLoading) {\r\n  //         dispatch({\r\n  //           type: LOAD_HASHTAG_POSTS_REQUEST,\r\n  //           lastId: mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id,\r\n  //           data: tag,\r\n  //         });\r\n  //       }\r\n  //     }\r\n  //   };\r\n  //   window.addEventListener(\"scroll\", onScroll);\r\n  //   return () => {\r\n  //     window.removeEventListener(\"scroll\", onScroll);\r\n  //   };\r\n  // }, [mainPosts.length, hasMorePosts, tag, loadPostsLoading]);\r\n\r\n  return (\r\n    <AppLayout>\r\n      {mainPosts.map((c) => (\r\n        <PostCard key={c.id} post={c} />\r\n      ))}\r\n    </AppLayout>\r\n  );\r\n};\r\n//og 이런게 카톡이나, 페북이런데 올리면, 미리보기 같은거임\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  console.log(context);\r\n  const cookie = context.req ? context.req.headers.cookie : \"\";\r\n  axios.defaults.headers.Cookie = \"\";\r\n  if (context.req && cookie) {\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_HASHTAG_POSTS_REQUEST,\r\n    data: context.params.tag,\r\n  });\r\n  context.store.dispatch(END); //next redux wrapper에 이렇게 하라고 적혀있음\r\n  await context.store.sagaTask.toPromise(); //이거는 configurestore에. sagaTask등록한거\r\n});\r\n\r\n//겟스타틱, 겟프롭스안에서는 context.params.id 또는 context.query.id하면 위에 userrouter에 똑같이 접근가능.\r\n\r\nexport default Hashtag;\r\n"]},"metadata":{},"sourceType":"module"}