{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"제로초\"\n    },\n    content: \"첫번째 게시글 #해시태그, #익스프레스\",\n    Images: [{\n      src: \"https://cdnb.artstation.com/p/assets/images/images/029/822/295/smaller_square/sakimi-chan-kdaahri.jpg?1598749952\"\n    }, {\n      src: \"https://p6m5s8c4.stackpathcdn.com/wp-content/uploads/2020/01/Screen-Shot-2020-01-28-at-12.11.51-PM.png\"\n    }, {\n      src: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRHrJIHYecs7LONs1yBDv7FmML5sSCoESzg9Q&usqp=CAU\"\n    }],\n    Comments: [{\n      User: {\n        nickname: \"nero\"\n      },\n      content: \"우와 개정판이 나왔군요\"\n    }, {\n      User: {\n        nickname: \"hero\"\n      },\n      content: \"얼른 사고싶어요\"\n    }]\n  }],\n  imagePaths: [],\n  //이미지 경로들\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null\n}; //왜 User, Image, Comment만 첫글자에 대문자냐? db에서 쓰는 시퀄라이즈랑 관계있는데.어떤 정보와 다른 정보가 관게가 있으면 그것을 합쳐줌\n//합쳐준 애들은 대문자가 되기 때문 , id나 content는 게시글 속성이고\n//미리 서버 개발자한테 물어보는게 좋지\n//action은 객체이다\n\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nvar dummyPost = {\n  id: 2,\n  content: \"더미데이터입니다.\",\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  },\n  Images: [],\n  Comments: []\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost].concat(_toConsumableArray(state.mainPosts)),\n        addPostLoading: false,\n        addPostDone: true\n      });\n    //dummyPost가 앞에 있어야 함 뒤에 있으면 게시글 맨 아래에 추가됨\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentDone: true\n      });\n    //dummyPost가 앞에 있어야 함 뒤에 있으면 게시글 맨 아래에 추가됨\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer; // const ADD_POST = \"ADD_POST\";\n// //이렇게 빼주면 좋은점이 밑에 ,case ADD_POST처럼 const값을 재활용 할수 있음\n// //그리고 변수 선언으로 인해 오타 방지\n// export const addPost = {\n//   type: ADD_POST,\n// };","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/ZeroCho/nodebird/prepare/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","reducer","state","action","error","addCommentLoading","addCommentDone","addCommentError"],"mappings":"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","sourcesContent":["export const initialState = {\r\n  mainPosts: [\r\n    {\r\n      id: 1,\r\n      User: {\r\n        id: 1,\r\n        nickname: \"제로초\",\r\n      },\r\n      content: \"첫번째 게시글 #해시태그, #익스프레스\",\r\n      Images: [\r\n        {\r\n          src:\r\n            \"https://cdnb.artstation.com/p/assets/images/images/029/822/295/smaller_square/sakimi-chan-kdaahri.jpg?1598749952\",\r\n        },\r\n        {\r\n          src:\r\n            \"https://p6m5s8c4.stackpathcdn.com/wp-content/uploads/2020/01/Screen-Shot-2020-01-28-at-12.11.51-PM.png\",\r\n        },\r\n        {\r\n          src:\r\n            \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRHrJIHYecs7LONs1yBDv7FmML5sSCoESzg9Q&usqp=CAU\",\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          User: {\r\n            nickname: \"nero\",\r\n          },\r\n          content: \"우와 개정판이 나왔군요\",\r\n        },\r\n        {\r\n          User: {\r\n            nickname: \"hero\",\r\n          },\r\n          content: \"얼른 사고싶어요\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  imagePaths: [], //이미지 경로들\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n};\r\n//왜 User, Image, Comment만 첫글자에 대문자냐? db에서 쓰는 시퀄라이즈랑 관계있는데.어떤 정보와 다른 정보가 관게가 있으면 그것을 합쳐줌\r\n//합쳐준 애들은 대문자가 되기 때문 , id나 content는 게시글 속성이고\r\n//미리 서버 개발자한테 물어보는게 좋지\r\n//action은 객체이다\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = {\r\n  id: 2,\r\n  content: \"더미데이터입니다.\",\r\n  User: {\r\n    id: 1,\r\n    nickname: \"제로초\",\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST:\r\n      return { ...state, addPostLoading: true, addPostDone: false, addPostError: null };\r\n    case ADD_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        mainPosts: [dummyPost, ...state.mainPosts],\r\n        addPostLoading: false,\r\n        addPostDone: true,\r\n      }; //dummyPost가 앞에 있어야 함 뒤에 있으면 게시글 맨 아래에 추가됨\r\n    case ADD_POST_FAILURE:\r\n      return { ...state, addPostLoading: false, addPostError: action.error };\r\n    case ADD_COMMENT_REQUEST:\r\n      return { ...state, addCommentLoading: true, addCommentDone: false, addCommentError: null };\r\n    case ADD_COMMENT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        addCommentLoading: false,\r\n        addCommentDone: true,\r\n      }; //dummyPost가 앞에 있어야 함 뒤에 있으면 게시글 맨 아래에 추가됨\r\n    case ADD_COMMENT_FAILURE:\r\n      return { ...state, addCommentLoading: false, addCommentError: action.error };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n\r\n// const ADD_POST = \"ADD_POST\";\r\n// //이렇게 빼주면 좋은점이 밑에 ,case ADD_POST처럼 const값을 재활용 할수 있음\r\n// //그리고 변수 선언으로 인해 오타 방지\r\n// export const addPost = {\r\n//   type: ADD_POST,\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}