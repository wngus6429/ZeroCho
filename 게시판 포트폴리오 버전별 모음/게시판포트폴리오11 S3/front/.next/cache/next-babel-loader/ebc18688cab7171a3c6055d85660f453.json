{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\wngus\\\\Documents\\\\GitHub\\\\ZeroCho\\\\nodebird\\\\prepare\\\\front\\\\components\\\\PostForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useRef, useEffect } from \"react\";\nimport { Form, Input, Button } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addPost, UPLOAD_IMAGES_REQUEST } from \"../reducers/post\";\nimport useinput from \"../hooks/useinput\"; // const { Input } = require(\"antd\");\n\nvar PostForm = function PostForm() {\n  _s();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      addPostDone = _useSelector.addPostDone,\n      imagePaths = _useSelector.imagePaths;\n\n  var dispatch = useDispatch();\n\n  var _useinput = useinput(\"\"),\n      _useinput2 = _slicedToArray(_useinput, 3),\n      text = _useinput2[0],\n      onChangeText = _useinput2[1],\n      setText = _useinput2[2];\n\n  useEffect(function () {\n    if (addPostDone) {\n      setText(\"\");\n    }\n  }, [addPostDone]);\n  var onSubmit = useCallback(function () {\n    dispatch(addPost(text));\n  }, [text]);\n  var imageInput = useRef();\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  var onChangeImages = useCallback(function (e) {\n    console.log(\"images\", e.target.files); //여기안에 이미지 파일 정보가 들어있음\n\n    var imageFormData = new FormData(); //이미지를 multipart로 안 올리면 multer가 처리를 안함\n\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append(\"image\", f); //앞에 image는 키다 router에서 image 문자일치 해야함\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  });\n  return (\n    /*#__PURE__*/\n    //encType=\"multipart/form-data\" 이거는 이미지 올리면 이 형식으로 올라간다고\n    //밑에 imageInput에서 전달된게 upload.array로 전달이 된다\n    _jsxDEV(Form, {\n      style: {\n        margin: \"10px 0 20px\"\n      },\n      encType: \"multipart/form-data\",\n      onFinish: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Input.TextArea, {\n        value: text,\n        onChange: onChangeText,\n        maxLength: 140,\n        placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"image\",\n          multiple: true,\n          hidden: true,\n          ref: imageInput,\n          onChange: onChangeImages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }, _this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: onClickImageUpload,\n          children: \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }, _this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          style: {\n            \"float\": \"right\"\n          },\n          htmlType: \"submit\",\n          children: \"\\uCA31\\uC9F9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: imagePaths.map(function (v) {\n          /*#__PURE__*/\n          _jsxDEV(\"div\", {\n            style: {\n              display: \"inline-block\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"http://localhost:3065/\".concat(v),\n              style: {\n                width: \"200px\"\n              },\n              alt: v\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 13\n            }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                children: \"\\uC81C\\uAC70\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 15\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 13\n            }, _this)]\n          }, v, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 11\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, _this)\n  );\n};\n\n_s(PostForm, \"h2gAXFSC3TR9dCE5Fia8DYbg31E=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = PostForm;\nexport default PostForm; //hidden은 밑에 다른 Button (이미지 삽입) 을 사용하기 위해서 안보이게 한것\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/ZeroCho/nodebird/prepare/front/components/PostForm.js"],"names":["React","useCallback","useRef","useEffect","Form","Input","Button","useDispatch","useSelector","addPost","UPLOAD_IMAGES_REQUEST","useinput","PostForm","state","post","addPostDone","imagePaths","dispatch","text","onChangeText","setText","onSubmit","imageInput","onClickImageUpload","current","click","onChangeImages","e","console","log","target","files","imageFormData","FormData","forEach","call","f","append","type","data","margin","map","v","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useRef, useEffect } from \"react\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addPost, UPLOAD_IMAGES_REQUEST } from \"../reducers/post\";\r\nimport useinput from \"../hooks/useinput\";\r\n\r\n// const { Input } = require(\"antd\");\r\n\r\nconst PostForm = () => {\r\n  const { addPostDone, imagePaths } = useSelector((state) => state.post);\r\n  const dispatch = useDispatch();\r\n  const [text, onChangeText, setText] = useinput(\"\");\r\n\r\n  useEffect(() => {\r\n    if (addPostDone) {\r\n      setText(\"\");\r\n    }\r\n  }, [addPostDone]);\r\n\r\n  const onSubmit = useCallback(() => {\r\n    dispatch(addPost(text));\r\n  }, [text]);\r\n\r\n  const imageInput = useRef();\r\n\r\n  const onClickImageUpload = useCallback(() => {\r\n    imageInput.current.click();\r\n  }, [imageInput.current]);\r\n\r\n  const onChangeImages = useCallback((e) => {\r\n    console.log(\"images\", e.target.files); //여기안에 이미지 파일 정보가 들어있음\r\n    const imageFormData = new FormData(); //이미지를 multipart로 안 올리면 multer가 처리를 안함\r\n    [].forEach.call(e.target.files, (f) => {\r\n      imageFormData.append(\"image\", f); //앞에 image는 키다 router에서 image 문자일치 해야함\r\n    });\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    });\r\n  });\r\n\r\n  return (\r\n    //encType=\"multipart/form-data\" 이거는 이미지 올리면 이 형식으로 올라간다고\r\n    //밑에 imageInput에서 전달된게 upload.array로 전달이 된다\r\n    <Form style={{ margin: \"10px 0 20px\" }} encType=\"multipart/form-data\" onFinish={onSubmit}>\r\n      <Input.TextArea\r\n        value={text}\r\n        onChange={onChangeText}\r\n        maxLength={140}\r\n        placeholder=\"어떤 신기한 일이 있었나요?\"\r\n      />\r\n      <div>\r\n        <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n        <Button type=\"primary\" style={{ float: \"right\" }} htmlType=\"submit\">\r\n          쨱짹\r\n        </Button>\r\n      </div>\r\n      <div>\r\n        {imagePaths.map((v) => {\r\n          <div key={v} style={{ display: \"inline-block\" }}>\r\n            <img src={`http://localhost:3065/${v}`} style={{ width: \"200px\" }} alt={v} />\r\n            <div>\r\n              <Button>제거</Button>\r\n            </div>\r\n          </div>;\r\n        })}\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n\r\n//hidden은 밑에 다른 Button (이미지 삽입) 을 사용하기 위해서 안보이게 한것\r\n"]},"metadata":{},"sourceType":"module"}