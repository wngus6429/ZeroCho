{"ast":null,"code":"import { all, fork, delay, put, takeLatest, call } from \"redux-saga/effects\"; //여기안에 delay, debounce, throttle, takeLastest, takeEvery, takeMaybe 같은것도 있음\n//지금 적은것들이 사가의 effect라 불림\n\nimport { LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FOLLOW_REQUEST, UNFOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, CHANGE_NICKNAME_REQUEST, CHANGE_NICKNAME_SUCCESS, CHANGE_NICKNAME_FAILURE, LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWINGS_REQUEST } from \"../reducers/user\";\nimport axios from \"axios\"; //이거는 컴바인 리듀스 같은게 필요 없음.\n\nfunction changeNicknameAPI(data) {\n  return axios.patch(\"/user/nickname\", {\n    nickname: data\n  });\n}\n\nfunction* changeNickname(action) {\n  try {\n    const result = yield call(changeNicknameAPI, action.data);\n    yield put({\n      type: CHANGE_NICKNAME_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: CHANGE_NICKNAME_FAILURE,\n      error: err.response.data\n    });\n  }\n} //get,delete는 데이터가 없기 떄문에, 두번째 자리가 withCredential자리, 근데\n//saga에서 공통 설정 해줬음\n\n\nfunction logUserAPI() {\n  return axios.get(\"/user\");\n}\n\nfunction* loadUser(action) {\n  try {\n    const result = yield call(logUserAPI, action.data);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: err.response.data\n    });\n  }\n} //logInAPI이거는 generator안임. * 붙이면 안됨\n\n\nfunction logInAPI(data) {\n  return axios.post(\"/user/login\", data); //로그인 요청 함\n} //항상 effect 앞에는 yield(일드)를 붙여준다\n//call, fork차이, fork는 비동기 함수 호출, call은 동기함수 호출\n//call을 하면 로그인 api가 리턴 할때까지 기다림. fork는 비동기라 요청보내버리고\n//결과 안 기다리고 바로 다음으로 감, call은 await이랑 비슷\n//그리고 데이터를 보낼때 logInAPI(action.data) 이렇게 해야하는데, call을 쓰면\n// 이걸 펼쳐줘야함 call(logInAPI, action.data); 밑에 처럼 이렇게\n//첫번쨰 자리가 함수고, 그 다음에 매개변수, 인수임 ,를 써서 더 주기 가능\n//굳이 yield를 안 붙여도되지만 붙이는 이유가 테스트 때문, 동작 보장이 되는가?\n\n\nfunction* logIn(action) {\n  try {\n    console.log(\"Saga User.js\");\n    const result = yield call(logInAPI, action.data); //이렇게 결과값 요청후 받음\n    // yield delay(1000); //서버 만들어 질때까지 delay로 비동기 효과 주기\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      //put은 dispatch라고 생각하면됨\n      data: result.data //성공 결과값, 성공후 reducer user.js switch로\n\n    }); //중요한게 사가에서 자동으로 try,catch로 상황보고 석세스나\n    //failure보내기 때문에 개인이 따로 액션을 할 필요가 없다\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    }); //요청이 항상 성공하는건 아니니까, try, catch 쓰면됨\n  }\n} //애네들이 비동기 액션 크리에이터, thunk는 비동기 크리에이터를 직접 했지만\n//Saga는 이벤트 리스너 같은 역할, 비유 하자면\n//로그인 액션이 들어오면,로그인 제너레이터 함수를 실행 하도록, * 있는게 제너레이터 함수\n//take는 문제가 1회성임. 로그인하고 로그아웃하면 로그인 이벤트가 사라진다는 말\n//그래서 while을 사용하는거임. 이걸해야 진정한 이벤트 리스너 ㅋㅋ (원노트 참조)\n//근데 반복문 적는건 좀 보기 안 좋고 더 좋은 기능인 takeEvery를 사용\n//takeLatest 는 마지막에 클릭한거. (로딩 도중 기준) 여러번 클릭 방지, 첫번째꺼는 takeLeading\n\n\nfunction logOutAPI() {\n  return axios.post(\"/user/logout\"); //로그인 요청 함\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post(\"/user\", data); //로그인 요청 함\n} //data안에 Email, Password, NickName 가 들어있다. signup.js 참조\n//get이랑 delete요청은 데이터를 못 보내지만, post,put,patch는 넘길수 있다. 두번째로\n\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data); //yield delay(1000); //throw new Error(\"\")를 하게 되면 바로 밑에 catch로 간다\n\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction followAPI(data) {\n  return axios.patch(`/user/${data}/follow`);\n} //data에 사용자 id넣어줌\n\n\nfunction* follow(action) {\n  try {\n    const result = yield call(followAPI, action.data); //throw new Error(\"\")를 하게 되면 바로 밑에 catch로 간다\n\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unfollowAPI(data) {\n  return axios.delete(`/user/${data}/follow`); //로그인 요청 함\n} //data에 사용자 id넣어줌\n\n\nfunction* unfollow(action) {\n  try {\n    const result = yield call(unfollowAPI, action.data); //throw new Error(\"\")를 하게 되면 바로 밑에 catch로 간다\n\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadFollowers() {\n  yield takeLatest(LOAD_FOLLOWERS_REQUEST, loadFollowers);\n}\n\nfunction* watchLoadFollowings() {\n  yield takeLatest(LOAD_FOLLOWINGS_REQUEST, loadFollwings);\n}\n\nfunction* watchChangeNickname() {\n  yield takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname);\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n} //로그인이라는 action이 실행될떄까지 기다리겠다.\n\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n} //이벤트 리스너를 만드는거임\n\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n} //로그인이라는 action이 실행될떄까지 기다리겠다.\n\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLoadFollowers), fork(watchLoadFollowings), fork(watchChangeNickname), fork(watchLoadUser), fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/ZeroCho/nodebird/prepare/front/sagas/user.js"],"names":["all","fork","delay","put","takeLatest","call","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","FOLLOW_REQUEST","UNFOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","CHANGE_NICKNAME_REQUEST","CHANGE_NICKNAME_SUCCESS","CHANGE_NICKNAME_FAILURE","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWINGS_REQUEST","axios","changeNicknameAPI","data","patch","nickname","changeNickname","action","result","type","err","error","response","logUserAPI","get","loadUser","logInAPI","post","logIn","console","log","logOutAPI","logOut","signUpAPI","signUp","followAPI","follow","unfollowAPI","delete","unfollow","watchLoadFollowers","loadFollowers","watchLoadFollowings","loadFollwings","watchChangeNickname","watchLoadUser","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, delay, put, takeLatest, call } from \"redux-saga/effects\";\r\n//여기안에 delay, debounce, throttle, takeLastest, takeEvery, takeMaybe 같은것도 있음\r\n//지금 적은것들이 사가의 effect라 불림\r\nimport {\r\n  LOAD_USER_REQUEST,\r\n  LOAD_USER_SUCCESS,\r\n  LOAD_USER_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  FOLLOW_REQUEST,\r\n  UNFOLLOW_REQUEST,\r\n  FOLLOW_SUCCESS,\r\n  FOLLOW_FAILURE,\r\n  UNFOLLOW_SUCCESS,\r\n  UNFOLLOW_FAILURE,\r\n  CHANGE_NICKNAME_REQUEST,\r\n  CHANGE_NICKNAME_SUCCESS,\r\n  CHANGE_NICKNAME_FAILURE,\r\n  LOAD_FOLLOWERS_REQUEST,\r\n  LOAD_FOLLOWINGS_REQUEST,\r\n} from \"../reducers/user\";\r\nimport axios from \"axios\";\r\n//이거는 컴바인 리듀스 같은게 필요 없음.\r\n\r\nfunction changeNicknameAPI(data) {\r\n  return axios.patch(\"/user/nickname\", { nickname: data });\r\n}\r\nfunction* changeNickname(action) {\r\n  try {\r\n    const result = yield call(changeNicknameAPI, action.data);\r\n    yield put({\r\n      type: CHANGE_NICKNAME_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: CHANGE_NICKNAME_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n//get,delete는 데이터가 없기 떄문에, 두번째 자리가 withCredential자리, 근데\r\n//saga에서 공통 설정 해줬음\r\nfunction logUserAPI() {\r\n  return axios.get(\"/user\");\r\n}\r\nfunction* loadUser(action) {\r\n  try {\r\n    const result = yield call(logUserAPI, action.data);\r\n    yield put({\r\n      type: LOAD_USER_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_USER_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n//logInAPI이거는 generator안임. * 붙이면 안됨\r\nfunction logInAPI(data) {\r\n  return axios.post(\"/user/login\", data); //로그인 요청 함\r\n}\r\n\r\n//항상 effect 앞에는 yield(일드)를 붙여준다\r\n//call, fork차이, fork는 비동기 함수 호출, call은 동기함수 호출\r\n//call을 하면 로그인 api가 리턴 할때까지 기다림. fork는 비동기라 요청보내버리고\r\n//결과 안 기다리고 바로 다음으로 감, call은 await이랑 비슷\r\n\r\n//그리고 데이터를 보낼때 logInAPI(action.data) 이렇게 해야하는데, call을 쓰면\r\n// 이걸 펼쳐줘야함 call(logInAPI, action.data); 밑에 처럼 이렇게\r\n//첫번쨰 자리가 함수고, 그 다음에 매개변수, 인수임 ,를 써서 더 주기 가능\r\n//굳이 yield를 안 붙여도되지만 붙이는 이유가 테스트 때문, 동작 보장이 되는가?\r\nfunction* logIn(action) {\r\n  try {\r\n    console.log(\"Saga User.js\");\r\n    const result = yield call(logInAPI, action.data); //이렇게 결과값 요청후 받음\r\n    // yield delay(1000); //서버 만들어 질때까지 delay로 비동기 효과 주기\r\n    yield put({\r\n      type: LOG_IN_SUCCESS, //put은 dispatch라고 생각하면됨\r\n      data: result.data, //성공 결과값, 성공후 reducer user.js switch로\r\n    }); //중요한게 사가에서 자동으로 try,catch로 상황보고 석세스나\r\n    //failure보내기 때문에 개인이 따로 액션을 할 필요가 없다\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    }); //요청이 항상 성공하는건 아니니까, try, catch 쓰면됨\r\n  }\r\n}\r\n//애네들이 비동기 액션 크리에이터, thunk는 비동기 크리에이터를 직접 했지만\r\n//Saga는 이벤트 리스너 같은 역할, 비유 하자면\r\n//로그인 액션이 들어오면,로그인 제너레이터 함수를 실행 하도록, * 있는게 제너레이터 함수\r\n\r\n//take는 문제가 1회성임. 로그인하고 로그아웃하면 로그인 이벤트가 사라진다는 말\r\n//그래서 while을 사용하는거임. 이걸해야 진정한 이벤트 리스너 ㅋㅋ (원노트 참조)\r\n//근데 반복문 적는건 좀 보기 안 좋고 더 좋은 기능인 takeEvery를 사용\r\n//takeLatest 는 마지막에 클릭한거. (로딩 도중 기준) 여러번 클릭 방지, 첫번째꺼는 takeLeading\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/user/logout\"); //로그인 요청 함\r\n}\r\nfunction* logOut() {\r\n  try {\r\n    yield call(logOutAPI);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n  return axios.post(\"/user\", data); //로그인 요청 함\r\n} //data안에 Email, Password, NickName 가 들어있다. signup.js 참조\r\n//get이랑 delete요청은 데이터를 못 보내지만, post,put,patch는 넘길수 있다. 두번째로\r\nfunction* signUp(action) {\r\n  try {\r\n    const result = yield call(signUpAPI, action.data);\r\n    //yield delay(1000); //throw new Error(\"\")를 하게 되면 바로 밑에 catch로 간다\r\n    console.log(result);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction followAPI(data) {\r\n  return axios.patch(`/user/${data}/follow`);\r\n} //data에 사용자 id넣어줌\r\nfunction* follow(action) {\r\n  try {\r\n    const result = yield call(followAPI, action.data);\r\n    //throw new Error(\"\")를 하게 되면 바로 밑에 catch로 간다\r\n    yield put({\r\n      type: FOLLOW_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: FOLLOW_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unfollowAPI(data) {\r\n  return axios.delete(`/user/${data}/follow`); //로그인 요청 함\r\n} //data에 사용자 id넣어줌\r\nfunction* unfollow(action) {\r\n  try {\r\n    const result = yield call(unfollowAPI, action.data);\r\n    //throw new Error(\"\")를 하게 되면 바로 밑에 catch로 간다\r\n    yield put({\r\n      type: UNFOLLOW_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UNFOLLOW_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadFollowers() {\r\n  yield takeLatest(LOAD_FOLLOWERS_REQUEST, loadFollowers);\r\n}\r\n\r\nfunction* watchLoadFollowings() {\r\n  yield takeLatest(LOAD_FOLLOWINGS_REQUEST, loadFollwings);\r\n}\r\n\r\nfunction* watchChangeNickname() {\r\n  yield takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname);\r\n}\r\n\r\nfunction* watchLoadUser() {\r\n  yield takeLatest(LOAD_USER_REQUEST, loadUser);\r\n}\r\n\r\nfunction* watchFollow() {\r\n  yield takeLatest(FOLLOW_REQUEST, follow);\r\n} //로그인이라는 action이 실행될떄까지 기다리겠다.\r\n\r\nfunction* watchUnfollow() {\r\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n\r\n//이벤트 리스너를 만드는거임\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n} //로그인이라는 action이 실행될떄까지 기다리겠다.\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLoadFollowers),\r\n    fork(watchLoadFollowings),\r\n    fork(watchChangeNickname),\r\n    fork(watchLoadUser),\r\n    fork(watchFollow),\r\n    fork(watchUnfollow),\r\n    fork(watchLogIn),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}