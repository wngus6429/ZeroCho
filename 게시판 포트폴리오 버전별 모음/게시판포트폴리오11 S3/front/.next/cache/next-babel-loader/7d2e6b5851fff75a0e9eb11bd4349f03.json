{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\wngus\\\\Documents\\\\GitHub\\\\ZeroCho\\\\nodebird\\\\prepare\\\\front\\\\components\\\\FollowButton.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport PropTypes from \"prop-types\";\nimport { Button } from \"antd\";\nimport React, { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FOLLOW_REQUEST, UNFOLLOW_REQUEST } from \"../reducers/user\";\n\nvar FollowButton = function FollowButton(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var dispatch = useDispatch(); //팔로 하고 있는지 안하고 있는지 구별 해야지\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me,\n      followLoading = _useSelector.followLoading,\n      unfollowLoading = _useSelector.unfollowLoading;\n\n  var isFollowing = me === null || me === void 0 ? void 0 : me.Followings.find(function (v) {\n    return v.id === post.User.id;\n  }); //제가 팔로잉 한사람들 목록들 중에 id들을 가지고 있을건데. 게시글 작성자에 아이디가 제 팔로잉 목록에 있다면 제가 팔로잉 하고 있는 사람이지\n\n  var onClickbutton = useCallback(function () {\n    if (isFollowing) {\n      dispatch({\n        type: UNFOLLOW_REQUEST,\n        data: post.User.id\n      });\n    } else {\n      dispatch({\n        type: FOLLOW_REQUEST,\n        data: post.User.id\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Button, {\n    loading: followLoading || unfollowLoading,\n    onClickbutton: onClickbutton,\n    children: isFollowing ? \"언팔로우\" : \"팔로우\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(FollowButton, \"XvIb9UFx+h7JGKZgAnOSawakjBA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = FollowButton;\nFollowButton.propTypes = {\n  post: PropTypes.object.isRequired\n};\nexport default FollowButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"FollowButton\");","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/ZeroCho/nodebird/prepare/front/components/FollowButton.js"],"names":["PropTypes","Button","React","useCallback","useDispatch","useSelector","FOLLOW_REQUEST","UNFOLLOW_REQUEST","FollowButton","post","dispatch","state","user","me","followLoading","unfollowLoading","isFollowing","Followings","find","v","id","User","onClickbutton","type","data","propTypes","object","isRequired"],"mappings":";;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,OAAOC,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,cAAT,EAAyBC,gBAAzB,QAAiD,kBAAjD;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAAc;AAAA;;AAAA,MAAXC,IAAW,QAAXA,IAAW;AACjC,MAAMC,QAAQ,GAAGN,WAAW,EAA5B,CADiC,CAEjC;;AAFiC,qBAGcC,WAAW,CAAC,UAACM,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAHzB;AAAA,MAGzBC,EAHyB,gBAGzBA,EAHyB;AAAA,MAGrBC,aAHqB,gBAGrBA,aAHqB;AAAA,MAGNC,eAHM,gBAGNA,eAHM;;AAIjC,MAAMC,WAAW,GAAGH,EAAH,aAAGA,EAAH,uBAAGA,EAAE,CAAEI,UAAJ,CAAeC,IAAf,CAAoB,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACC,EAAF,KAASX,IAAI,CAACY,IAAL,CAAUD,EAA1B;AAAA,GAApB,CAApB,CAJiC,CAKjC;;AACA,MAAME,aAAa,GAAGnB,WAAW,CAAC,YAAM;AACtC,QAAIa,WAAJ,EAAiB;AACfN,MAAAA,QAAQ,CAAC;AACPa,QAAAA,IAAI,EAAEhB,gBADC;AAEPiB,QAAAA,IAAI,EAAEf,IAAI,CAACY,IAAL,CAAUD;AAFT,OAAD,CAAR;AAID,KALD,MAKO;AACLV,MAAAA,QAAQ,CAAC;AACPa,QAAAA,IAAI,EAAEjB,cADC;AAEPkB,QAAAA,IAAI,EAAEf,IAAI,CAACY,IAAL,CAAUD;AAFT,OAAD,CAAR;AAID;AACF,GAZgC,EAY9B,EAZ8B,CAAjC;AAaA,sBACE,QAAC,MAAD;AAAQ,IAAA,OAAO,EAAEN,aAAa,IAAIC,eAAlC;AAAmD,IAAA,aAAa,EAAEO,aAAlE;AAAA,cACGN,WAAW,GAAG,MAAH,GAAY;AAD1B;AAAA;AAAA;AAAA;AAAA,WADF;AAKD,CAxBD;;GAAMR,Y;UACaJ,W,EAE8BC,W;;;KAH3CG,Y;AA0BNA,YAAY,CAACiB,SAAb,GAAyB;AACvBhB,EAAAA,IAAI,EAAET,SAAS,CAAC0B,MAAV,CAAiBC;AADA,CAAzB;AAIA,eAAenB,YAAf","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport { Button } from \"antd\";\r\nimport React, { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { FOLLOW_REQUEST, UNFOLLOW_REQUEST } from \"../reducers/user\";\r\n\r\nconst FollowButton = ({ post }) => {\r\n  const dispatch = useDispatch();\r\n  //팔로 하고 있는지 안하고 있는지 구별 해야지\r\n  const { me, followLoading, unfollowLoading } = useSelector((state) => state.user);\r\n  const isFollowing = me?.Followings.find((v) => v.id === post.User.id);\r\n  //제가 팔로잉 한사람들 목록들 중에 id들을 가지고 있을건데. 게시글 작성자에 아이디가 제 팔로잉 목록에 있다면 제가 팔로잉 하고 있는 사람이지\r\n  const onClickbutton = useCallback(() => {\r\n    if (isFollowing) {\r\n      dispatch({\r\n        type: UNFOLLOW_REQUEST,\r\n        data: post.User.id,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: FOLLOW_REQUEST,\r\n        data: post.User.id,\r\n      });\r\n    }\r\n  }, []);\r\n  return (\r\n    <Button loading={followLoading || unfollowLoading} onClickbutton={onClickbutton}>\r\n      {isFollowing ? \"언팔로우\" : \"팔로우\"}\r\n    </Button>\r\n  );\r\n};\r\n\r\nFollowButton.propTypes = {\r\n  post: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default FollowButton;\r\n"]},"metadata":{},"sourceType":"module"}