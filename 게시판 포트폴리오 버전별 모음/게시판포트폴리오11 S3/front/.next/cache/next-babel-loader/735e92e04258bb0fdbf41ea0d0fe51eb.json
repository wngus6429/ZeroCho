{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\wngus\\\\Documents\\\\GitHub\\\\portfolio-japanese\\\\prepare\\\\front\\\\components\\\\PostCard.js\";\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, Card, Popover, Avatar, List, Comment } from \"antd\";\nimport { RetweetOutlined, HeartOutlined, HeartTwoTone, MessageOutlined, EllipsisOutlined } from \"@ant-design/icons\";\nimport PostImages from \"./PostImages\";\nimport CommentForm from \"./CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport Link from \"next/link\";\nimport moment from \"moment\";\nimport { LIKE_POST_REQUEST, REMOVE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from \"../reducers/post\";\nimport FollowButton from \"./FollowButton\";\nmoment.locale(\"ko\"); //한글로 바꿔줌\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    removePostLoading,\n    retweetError\n  } = useSelector(state => state.post);\n  const {\n    0: commentFormOpened,\n    1: setcommentFormOpened\n  } = useState(false);\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  }); //me.id가 있으면 그 데이터가 들어가고 없으면 undefined\n  //옵셔널 체이닝 연산자라고 한다. optional chaining\n\n  const onLike = useCallback(() => {\n    if (!id) {\n      return alert(\"ログインが必要です。\");\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onUnlike = useCallback(() => {\n    if (!id) {\n      return alert(\"ログインが必要です。\");\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onRemovePost = useCallback(() => {\n    if (!id) {\n      return alert(\"ログインが必要です。\");\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onToggleComment = useCallback(() => {\n    setcommentFormOpened(prev => !prev); //이렇게 하면 true는 false로 false는 true로 함\n  }, []);\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert(\"ログインが必要です。\");\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const liked = post.Likers.find(v => v.id === id);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      cover: post.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n        images: post.Images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 34\n      }, this),\n      actions: [/*#__PURE__*/_jsxDEV(RetweetOutlined, {\n        onClick: onRetweet\n      }, \"retweet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), liked ? /*#__PURE__*/_jsxDEV(HeartTwoTone, {\n        twoToneColor: \"#eb2f96\",\n        onClick: onUnlike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(HeartOutlined, {\n        onClick: onLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"comment\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Popover, {\n        content: /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              children: \"\\u4FEE\\u6B63\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"danger\",\n              loading: removePostLoading,\n              onClick: onRemovePost,\n              children: \"\\u524A\\u9664\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n            children: \"\\u7533\\u544A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(EllipsisOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)\n      }, \"more\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)],\n      title: post.RetweetId ? `${post.User.nickname}様がRetweetしました。` : null,\n      extra: id && /*#__PURE__*/_jsxDEV(FollowButton, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 22\n      }, this),\n      children: post.RetweetId && post.Retweent ? /*#__PURE__*/_jsxDEV(Card, {\n        cover: post.Retweet.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n          images: post.Retweet.Images\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 50\n        }, this),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            float: \"right\"\n          },\n          children: moment(post.createdAt).format(\"YYYY.MM.DD\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Card.Meta, {\n          avatar: /*#__PURE__*/_jsxDEV(Link, {\n            href: `/user/${post.Retweet.User.id}`,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: /*#__PURE__*/_jsxDEV(Avatar, {\n                children: post.Retweet.User.nickname[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 17\n          }, this),\n          title: post.Retweet.User.nickname // description={post.content}\n          ,\n          description: /*#__PURE__*/_jsxDEV(PostCardContent, {\n            postData: post.Retweet.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 28\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            float: \"right\"\n          },\n          children: moment(post.createdAt).format(\"YYYY.MM.DD\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Card.Meta, {\n          avatar:\n          /*#__PURE__*/\n          //아바타누르면 그 사람이 쓴 글 볼수 있게\n          _jsxDEV(Link, {\n            href: `/user/${post.User.id}`,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: /*#__PURE__*/_jsxDEV(Avatar, {\n                children: post.User.nickname[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 17\n          }, this),\n          title: post.User.nickname // description={post.content}\n          ,\n          description: /*#__PURE__*/_jsxDEV(PostCardContent, {\n            postData: post.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 28\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), commentFormOpened && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(CommentForm, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        header: `${post.Comments.length}個の コメント`,\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments,\n        renderItem: item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Comment, {\n            author: item.User.nickname,\n            avatar: /*#__PURE__*/_jsxDEV(Link, {\n              href: `/user/${item.User.id}`,\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                children: /*#__PURE__*/_jsxDEV(Avatar, {\n                  children: item.User.nickname[0]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 21\n            }, this),\n            content: item.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n    RetweetId: PropTypes.number,\n    Retweet: PropTypes.objectOf(PropTypes.any)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/portfolio-japanese/prepare/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","PropTypes","useDispatch","useSelector","Button","Card","Popover","Avatar","List","Comment","RetweetOutlined","HeartOutlined","HeartTwoTone","MessageOutlined","EllipsisOutlined","PostImages","CommentForm","PostCardContent","Link","moment","LIKE_POST_REQUEST","REMOVE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","FollowButton","locale","PostCard","post","dispatch","removePostLoading","retweetError","state","commentFormOpened","setcommentFormOpened","id","user","me","onLike","alert","type","data","onUnlike","onRemovePost","onToggleComment","prev","onRetweet","liked","Likers","find","v","marginBottom","Images","User","RetweetId","nickname","Retweent","Retweet","float","createdAt","format","content","Comments","length","item","propTypes","shape","number","object","string","arrayOf","objectOf","any","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button, Card, Popover, Avatar, List, Comment } from \"antd\";\r\nimport {\r\n  RetweetOutlined,\r\n  HeartOutlined,\r\n  HeartTwoTone,\r\n  MessageOutlined,\r\n  EllipsisOutlined,\r\n} from \"@ant-design/icons\";\r\nimport PostImages from \"./PostImages\";\r\nimport CommentForm from \"./CommentForm\";\r\nimport PostCardContent from \"./PostCardContent\";\r\nimport Link from \"next/link\";\r\nimport moment from \"moment\";\r\nimport {\r\n  LIKE_POST_REQUEST,\r\n  REMOVE_POST_REQUEST,\r\n  UNLIKE_POST_REQUEST,\r\n  RETWEET_REQUEST,\r\n} from \"../reducers/post\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\nmoment.locale(\"ko\"); //한글로 바꿔줌\r\n\r\nconst PostCard = ({ post }) => {\r\n  const dispatch = useDispatch();\r\n  const { removePostLoading, retweetError } = useSelector((state) => state.post);\r\n  const [commentFormOpened, setcommentFormOpened] = useState(false);\r\n  const id = useSelector((state) => state.user.me?.id);\r\n  //me.id가 있으면 그 데이터가 들어가고 없으면 undefined\r\n  //옵셔널 체이닝 연산자라고 한다. optional chaining\r\n\r\n  const onLike = useCallback(() => {\r\n    if (!id) {\r\n      return alert(\"ログインが必要です。\");\r\n    }\r\n    return dispatch({\r\n      type: LIKE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [id]);\r\n  const onUnlike = useCallback(() => {\r\n    if (!id) {\r\n      return alert(\"ログインが必要です。\");\r\n    }\r\n    return dispatch({\r\n      type: UNLIKE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [id]);\r\n  const onRemovePost = useCallback(() => {\r\n    if (!id) {\r\n      return alert(\"ログインが必要です。\");\r\n    }\r\n    return dispatch({\r\n      type: REMOVE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [id]);\r\n  const onToggleComment = useCallback(() => {\r\n    setcommentFormOpened((prev) => !prev); //이렇게 하면 true는 false로 false는 true로 함\r\n  }, []);\r\n\r\n  const onRetweet = useCallback(() => {\r\n    if (!id) {\r\n      return alert(\"ログインが必要です。\");\r\n    }\r\n    return dispatch({\r\n      type: RETWEET_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [id]);\r\n\r\n  const liked = post.Likers.find((v) => v.id === id);\r\n  return (\r\n    <div style={{ marginBottom: 20 }}>\r\n      <Card\r\n        cover={post.Images[0] && <PostImages images={post.Images} />}\r\n        actions={[\r\n          <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\r\n          liked ? (\r\n            <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onUnlike} />\r\n          ) : (\r\n            <HeartOutlined key=\"heart\" onClick={onLike} />\r\n          ),\r\n          <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\r\n          <Popover\r\n            key=\"more\"\r\n            content={\r\n              <Button.Group>\r\n                {id && post.User.id === id ? (\r\n                  <>\r\n                    <Button>修正</Button>\r\n                    <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>\r\n                      削除\r\n                    </Button>\r\n                  </>\r\n                ) : (\r\n                  <Button>申告</Button>\r\n                )}\r\n              </Button.Group>\r\n            }\r\n          >\r\n            <EllipsisOutlined />\r\n          </Popover>,\r\n        ]}\r\n        title={post.RetweetId ? `${post.User.nickname}様がRetweetしました。` : null}\r\n        extra={id && <FollowButton post={post} />}\r\n      >\r\n        {post.RetweetId && post.Retweent ? (\r\n          <Card cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}>\r\n            <div style={{ float: \"right\" }}>{moment(post.createdAt).format(\"YYYY.MM.DD\")}</div>\r\n            <Card.Meta\r\n              avatar={\r\n                <Link href={`/user/${post.Retweet.User.id}`}>\r\n                  <a>\r\n                    <Avatar>{post.Retweet.User.nickname[0]}</Avatar>\r\n                  </a>\r\n                </Link>\r\n              }\r\n              title={post.Retweet.User.nickname}\r\n              // description={post.content}\r\n              description={<PostCardContent postData={post.Retweet.content} />}\r\n            />\r\n          </Card>\r\n        ) : (\r\n          <>\r\n            <div style={{ float: \"right\" }}>{moment(post.createdAt).format(\"YYYY.MM.DD\")}</div>\r\n            <Card.Meta\r\n              avatar={\r\n                //아바타누르면 그 사람이 쓴 글 볼수 있게\r\n                <Link href={`/user/${post.User.id}`}>\r\n                  <a>\r\n                    <Avatar>{post.User.nickname[0]}</Avatar>\r\n                  </a>\r\n                </Link>\r\n              }\r\n              title={post.User.nickname}\r\n              // description={post.content}\r\n              description={<PostCardContent postData={post.content} />}\r\n            />\r\n          </>\r\n        )}\r\n      </Card>\r\n      {commentFormOpened && (\r\n        <div>\r\n          <CommentForm post={post} />\r\n          <List\r\n            header={`${post.Comments.length}個の コメント`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments}\r\n            renderItem={(item) => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={\r\n                    <Link href={`/user/${item.User.id}`}>\r\n                      <a>\r\n                        <Avatar>{item.User.nickname[0]}</Avatar>\r\n                      </a>\r\n                    </Link>\r\n                  }\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </div>\r\n      )}\r\n      {/* \r\n      <Comments /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    createdAt: PropTypes.string,\r\n    Comments: PropTypes.arrayOf(PropTypes.object),\r\n    Images: PropTypes.arrayOf(PropTypes.object),\r\n    Likers: PropTypes.arrayOf(PropTypes.object),\r\n    RetweetId: PropTypes.number,\r\n    Retweet: PropTypes.objectOf(PropTypes.any),\r\n  }).isRequired,\r\n};\r\n\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}