{"ast":null,"code":"import { all, fork, delay, put, takeLatest, throttle, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction uploadImagesAPI(data) {\n  return axios.post(\"/post/images\", data); //{name:data} 이렇게 하면 json이 되어버린다\n} //게시글의 일부분 수정하는거라 patch이다\n\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n} //게시글의 일부분 수정하는거라 patch이다\n\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/posts\", data); //로그인 요청 함\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", data); //form데이터는 {} 이런걸로 감싸면 안됨\n  //뒷부분을 저렇게 해줘야 req.body 안에 들어간다\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      //게시글 작성하면 게시글에 대한 id와\n      data: result.data.id //유저 id를 연결 해야하니까\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`); //delete에는 뒤에 data못 넣음\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      //user Reducer 조작부분\n      type: REMOVE_POST_OF_ME,\n      //게시글 작성하면 게시글에 대한 id와\n      data: action.data //유저 id를 연결 해야하니까\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); //post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retWeet);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\n} //스크롤 움직이면 너무 많이 실행되기 때문에 한번만 되게끔 2초안에\n// 하나라도 action이 적은게 좋다\n\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n} // function* watchAddPost() {\n//     yield throttle(\"LOG_POST_REQUEST\", addPost, 2000); //2초동안 리퀘스트 딱 1번만\n// }","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/ZeroCho/nodebird/prepare/front/sagas/post.js"],"names":["all","fork","delay","put","takeLatest","throttle","call","axios","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","uploadImagesAPI","data","post","uploadImages","action","result","type","err","console","error","response","likePostAPI","patch","likePost","unlikePostAPI","delete","unlikePost","loadPostsAPI","get","loadPosts","addPostAPI","addPost","id","removePostAPI","removePost","addCommentAPI","postId","addComment","watchRetweet","retWeet","watchUploadImages","watchLikePost","watchUnlikePost","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, delay, put, takeLatest, throttle, call } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  LIKE_POST_REQUEST,\r\n  LIKE_POST_SUCCESS,\r\n  LIKE_POST_FAILURE,\r\n  UNLIKE_POST_REQUEST,\r\n  UNLIKE_POST_SUCCESS,\r\n  UNLIKE_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  LOAD_POSTS_FAILURE,\r\n  UPLOAD_IMAGES_REQUEST,\r\n  UPLOAD_IMAGES_SUCCESS,\r\n  UPLOAD_IMAGES_FAILURE,\r\n  RETWEET_REQUEST,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction uploadImagesAPI(data) {\r\n  return axios.post(\"/post/images\", data); //{name:data} 이렇게 하면 json이 되어버린다\r\n} //게시글의 일부분 수정하는거라 patch이다\r\nfunction* uploadImages(action) {\r\n  try {\r\n    const result = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n  return axios.patch(`/post/${data}/like`);\r\n} //게시글의 일부분 수정하는거라 patch이다\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n  return axios.delete(`/post/${data}/like`);\r\n}\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get(\"/posts\", data); //로그인 요청 함\r\n}\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const result = yield call(loadPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/post\", data); //form데이터는 {} 이런걸로 감싸면 안됨\r\n  //뒷부분을 저렇게 해줘야 req.body 안에 들어간다\r\n}\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME, //게시글 작성하면 게시글에 대한 id와\r\n      data: result.data.id, //유저 id를 연결 해야하니까\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(`/post/${data}`); //delete에는 뒤에 data못 넣음\r\n}\r\nfunction* removePost(action) {\r\n  try {\r\n    const result = yield call(removePostAPI, action.data);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      //user Reducer 조작부분\r\n      type: REMOVE_POST_OF_ME, //게시글 작성하면 게시글에 대한 id와\r\n      data: action.data, //유저 id를 연결 해야하니까\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data); //post/1/comment\r\n}\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchRetweet() {\r\n  yield takeLatest(RETWEET_REQUEST, retWeet);\r\n}\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\nfunction* watchLoadPosts() {\r\n  yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\r\n} //스크롤 움직이면 너무 많이 실행되기 때문에 한번만 되게끔 2초안에\r\n// 하나라도 action이 적은게 좋다\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchRetweet),\r\n    fork(watchUploadImages),\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n\r\n// function* watchAddPost() {\r\n//     yield throttle(\"LOG_POST_REQUEST\", addPost, 2000); //2초동안 리퀘스트 딱 1번만\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}