{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\wngus\\\\Documents\\\\GitHub\\\\ZeroCho\\\\nodebird\\\\prepare\\\\front\\\\components\\\\PostForm.js\";\nimport React, { useCallback, useRef, useEffect } from \"react\";\nimport { Form, Input, Button } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addPost, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE, ADD_POST_REQUEST } from \"../reducers/post\";\nimport useinput from \"../hooks/useinput\"; // const { Input } = require(\"antd\");\n\nconst PostForm = () => {\n  const dispatch = useDispatch();\n  const {\n    imagePaths,\n    addPostLoading,\n    addPostDone\n  } = useSelector(state => state.post);\n  const [text, onChangeText, setText] = useinput(\"\");\n  const imageInput = useRef();\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  useEffect(() => {\n    if (addPostDone) {\n      setText(\"\");\n    }\n  }, [addPostDone]);\n  const onSubmit = useCallback(() => {\n    dispatch({\n      type: ADD_POST_REQUEST\n    });\n  }, [text]);\n  const onChangeImages = useCallback(e => {\n    console.log(\"images\", e.target.files); //여기안에 이미지 파일 정보가 들어있음\n\n    const imageFormData = new FormData(); //이미지를 multipart로 안 올리면 multer가 처리를 안함\n\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append(\"image\", f); //앞에 image는 키다 router에서 image 문자일치 해야함\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  const onRemoveImage = useCallback(index => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      data: index\n    });\n  });\n  return (\n    /*#__PURE__*/\n    //encType=\"multipart/form-data\" 이거는 이미지 올리면 이 형식으로 올라간다고\n    //밑에 imageInput에서 전달된게 upload.array로 전달이 된다\n    _jsxDEV(Form, {\n      style: {\n        margin: \"10px 0 20px\"\n      },\n      encType: \"multipart/form-data\",\n      onFinish: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Input.TextArea, {\n        value: text,\n        onChange: onChangeText,\n        maxLength: 140,\n        placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"image\",\n          multiple: true,\n          hidden: true,\n          ref: imageInput,\n          onChange: onChangeImages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: onClickImageUpload,\n          children: \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          style: {\n            float: \"right\"\n          },\n          htmlType: \"submit\",\n          children: \"\\uC9F9\\uC9F9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: imagePaths.map((v, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"inline-block\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: `http://localhost:3065/${v}`,\n            style: {\n              width: \"200px\"\n            },\n            alt: v\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: onRemoveImage(i),\n              children: \"\\uC81C\\uAC70\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)]\n        }, v, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this)\n  );\n};\n\nexport default PostForm; //hidden은 밑에 다른 Button (이미지 삽입) 을 사용하기 위해서 안보이게 한것","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/ZeroCho/nodebird/prepare/front/components/PostForm.js"],"names":["React","useCallback","useRef","useEffect","Form","Input","Button","useDispatch","useSelector","addPost","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","ADD_POST_REQUEST","useinput","PostForm","dispatch","imagePaths","addPostLoading","addPostDone","state","post","text","onChangeText","setText","imageInput","onClickImageUpload","current","click","onSubmit","type","onChangeImages","e","console","log","target","files","imageFormData","FormData","forEach","call","f","append","data","onRemoveImage","index","margin","float","map","v","i","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useRef, useEffect } from \"react\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addPost, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE, ADD_POST_REQUEST } from \"../reducers/post\";\r\nimport useinput from \"../hooks/useinput\";\r\n\r\n// const { Input } = require(\"antd\");\r\n\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const { imagePaths, addPostLoading, addPostDone } = useSelector((state) => state.post);\r\n  const [text, onChangeText, setText] = useinput(\"\");\r\n\r\n  const imageInput = useRef();\r\n  const onClickImageUpload = useCallback(() => {\r\n    imageInput.current.click();\r\n  }, [imageInput.current]);\r\n\r\n  useEffect(() => {\r\n    if (addPostDone) {\r\n      setText(\"\");\r\n    }\r\n  }, [addPostDone]);\r\n\r\n  const onSubmit = useCallback(() => {\r\n    dispatch({ type: ADD_POST_REQUEST });\r\n  }, [text]);\r\n\r\n  const onChangeImages = useCallback((e) => {\r\n    console.log(\"images\", e.target.files); //여기안에 이미지 파일 정보가 들어있음\r\n    const imageFormData = new FormData(); //이미지를 multipart로 안 올리면 multer가 처리를 안함\r\n    [].forEach.call(e.target.files, (f) => {\r\n      imageFormData.append(\"image\", f); //앞에 image는 키다 router에서 image 문자일치 해야함\r\n    });\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    });\r\n  }, []);\r\n\r\n  const onRemoveImage = useCallback((index) => () => {\r\n    dispatch({\r\n      type: REMOVE_IMAGE,\r\n      data: index,\r\n    });\r\n  });\r\n  return (\r\n    //encType=\"multipart/form-data\" 이거는 이미지 올리면 이 형식으로 올라간다고\r\n    //밑에 imageInput에서 전달된게 upload.array로 전달이 된다\r\n    <Form style={{ margin: \"10px 0 20px\" }} encType=\"multipart/form-data\" onFinish={onSubmit}>\r\n      <Input.TextArea\r\n        value={text}\r\n        onChange={onChangeText}\r\n        maxLength={140}\r\n        placeholder=\"어떤 신기한 일이 있었나요?\"\r\n      />\r\n      <div>\r\n        <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n        <Button type=\"primary\" style={{ float: \"right\" }} htmlType=\"submit\">\r\n          짹짹\r\n        </Button>\r\n      </div>\r\n      <div>\r\n        {imagePaths.map((v, i) => (\r\n          <div key={v} style={{ display: \"inline-block\" }}>\r\n            <img src={`http://localhost:3065/${v}`} style={{ width: \"200px\" }} alt={v} />\r\n            <div>\r\n              <Button onClick={onRemoveImage(i)}>제거</Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n\r\n//hidden은 밑에 다른 Button (이미지 삽입) 을 사용하기 위해서 안보이게 한것\r\n"]},"metadata":{},"sourceType":"module"}