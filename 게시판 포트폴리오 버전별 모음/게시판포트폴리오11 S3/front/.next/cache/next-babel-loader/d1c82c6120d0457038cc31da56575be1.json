{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\wngus\\\\Documents\\\\GitHub\\\\ZeroCho\\\\nodebird\\\\prepare\\\\front\\\\pages\\\\index.js\";\nimport React, { useEffect } from \"react\"; //next는 이거 없어도됨\n\nimport AppLayout from \"../components/AppLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport PostCard from \"../components/PostCard\";\nimport PostForm from \"../components/PostForm\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\"; //next는 pages라는 폴더를 인식한다 그래서 그 파일을 개별적인 페이지 컴포넌트로 만들어짐\n\nconst Home = () => {\n  //메인 페이지가 나올때 바로 useEffect도 되겠지\n  const dispatch = useDispatch(); //Componentsdidmount 효과, 빈배열뒤에 넣으면\n\n  useEffect(() => {\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []);\n  useEffect(() => {\n    function onScroll() {\n      console.log(window.scrollY, //얼마나 내렸는지 위치,\n      document.documentElement.clientHeight, //화면에서 보이는 길이\n      document.documentElement.scrollHeight //총 길이\n      );\n    }\n\n    window.addEventListener(\"scroll\", onScroll);\n    return () => {\n      //윈도우에서 addEvent 하면 주의해야할게 리턴을 꼭 해줘야함\n      //스크롤 했던거 해제 해야함. 아니면 메모리에 쌓임\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, []);\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts\n  } = useSelector(state => state.post);\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 14\n    }, this), mainPosts.map(post => /*#__PURE__*/_jsxDEV(PostCard, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Home; //위에 index를 key로 하면 안됨. 특히 게시글이 지워질 가능성이 있는경우에는 특히\n//순서가 달라지거나 중간에 뭐가 추가될때 key를 index로 쓰면안됨.\n//바뀌지 않는거다. 반복문이 있고 그 데이터가 바뀌지 않을때는 key를 index로 쓸수 있음.\n//post안에 id를 사용","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/ZeroCho/nodebird/prepare/front/pages/index.js"],"names":["React","useEffect","AppLayout","useDispatch","useSelector","PostCard","PostForm","LOAD_POSTS_REQUEST","Home","dispatch","type","onScroll","console","log","window","scrollY","document","documentElement","clientHeight","scrollHeight","addEventListener","removeEventListener","me","state","user","mainPosts","post","map","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAA0C;;AAC1C,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,kBAAT,QAAmC,kBAAnC,C,CAEA;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB;AACA,QAAMC,QAAQ,GAAGN,WAAW,EAA5B,CAFiB,CAGjB;;AACAF,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEH;AADC,KAAD,CAAR;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMAN,EAAAA,SAAS,CAAC,MAAM;AACd,aAASU,QAAT,GAAoB;AAClBC,MAAAA,OAAO,CAACC,GAAR,CACEC,MAAM,CAACC,OADT,EACkB;AAChBC,MAAAA,QAAQ,CAACC,eAAT,CAAyBC,YAF3B,EAEyC;AACvCF,MAAAA,QAAQ,CAACC,eAAT,CAAyBE,YAH3B,CAGwC;AAHxC;AAKD;;AACDL,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCT,QAAlC;AACA,WAAO,MAAM;AACX;AACA;AACAG,MAAAA,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCV,QAArC;AACD,KAJD;AAKD,GAdQ,EAcN,EAdM,CAAT;AAgBA,QAAM;AAAEW,IAAAA;AAAF,MAASlB,WAAW,CAAEmB,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAA1B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAgBrB,WAAW,CAAEmB,KAAD,IAAWA,KAAK,CAACG,IAAlB,CAAjC;AACA,sBACE,QAAC,SAAD;AAAA,eACGJ,EAAE,iBAAI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YADT,EAEGG,SAAS,CAACE,GAAV,CAAeD,IAAD,iBACb,QAAC,QAAD;AAAwB,MAAA,IAAI,EAAEA;AAA9B,OAAeA,IAAI,CAACE,EAApB;AAAA;AAAA;AAAA;AAAA,YADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CApCD;;AAsCA,eAAepB,IAAf,C,CAEA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect } from \"react\"; //next는 이거 없어도됨\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PostCard from \"../components/PostCard\";\r\nimport PostForm from \"../components/PostForm\";\r\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\r\n\r\n//next는 pages라는 폴더를 인식한다 그래서 그 파일을 개별적인 페이지 컴포넌트로 만들어짐\r\n\r\nconst Home = () => {\r\n  //메인 페이지가 나올때 바로 useEffect도 되겠지\r\n  const dispatch = useDispatch();\r\n  //Componentsdidmount 효과, 빈배열뒤에 넣으면\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: LOAD_POSTS_REQUEST,\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      console.log(\r\n        window.scrollY, //얼마나 내렸는지 위치,\r\n        document.documentElement.clientHeight, //화면에서 보이는 길이\r\n        document.documentElement.scrollHeight //총 길이\r\n      );\r\n    }\r\n    window.addEventListener(\"scroll\", onScroll);\r\n    return () => {\r\n      //윈도우에서 addEvent 하면 주의해야할게 리턴을 꼭 해줘야함\r\n      //스크롤 했던거 해제 해야함. 아니면 메모리에 쌓임\r\n      window.removeEventListener(\"scroll\", onScroll);\r\n    };\r\n  }, []);\r\n\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts } = useSelector((state) => state.post);\r\n  return (\r\n    <AppLayout>\r\n      {me && <PostForm />}\r\n      {mainPosts.map((post) => (\r\n        <PostCard key={post.id} post={post} />\r\n      ))}\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n\r\n//위에 index를 key로 하면 안됨. 특히 게시글이 지워질 가능성이 있는경우에는 특히\r\n//순서가 달라지거나 중간에 뭐가 추가될때 key를 index로 쓰면안됨.\r\n//바뀌지 않는거다. 반복문이 있고 그 데이터가 바뀌지 않을때는 key를 index로 쓸수 있음.\r\n//post안에 id를 사용\r\n"]},"metadata":{},"sourceType":"module"}