{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(retWeet),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchRetweet),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, put, takeLatest, throttle, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction retWeetAPI(data) {\n  return axios.post(\"/post/\".concat(data, \"/retweet\"));\n}\n\nfunction retWeet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retWeet$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(retWeetAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post(\"/post/images\", data); //{name:data} 이렇게 하면 json이 되어버린다\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(\"/post/\".concat(data, \"/like\"));\n} //게시글의 일부분 수정하는거라 patch이다\n\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction unlikePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data, \"/like\"));\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context4.next = 13;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(\"/post/\".concat(data));\n}\n\nfunction loadPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadPostAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: LOAD_POST_FAILURE,\n            data: _context5.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(\"/posts?lastId=\".concat(lastId || 0)); //lastId가 undefined일 경우 0\n} //get에서 데이터를 넣을려면 주소뒤에 ?를 찍고 key는 값\n//주소만봐도 데이터가 담겨있어서 주소를 캐싱하면 데이터까지 같이 캐싱이됨\n//post. put.patch는 데이터캐싱이 안되는데 .get은 데이터캐싱도 할수 있어서 이점이 있다\n\n\nfunction loadPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(loadPostsAPI, action.lastId);\n\n        case 3:\n          result = _context6.sent;\n          _context6.next = 6;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context6.next = 13;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error(_context6.t0);\n          _context6.next = 13;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            error: _context6.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 8]]);\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", data); //form데이터는 {} 이런걸로 감싸면 안됨\n  //뒷부분을 저렇게 해줘야 req.body 안에 들어간다\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            //게시글 작성하면 게시글에 대한 id와\n            data: result.data.id //유저 id를 연결 해야하니까\n\n          });\n\n        case 8:\n          _context7.next = 15;\n          break;\n\n        case 10:\n          _context7.prev = 10;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context7.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 10]]);\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data)); //delete에는 뒤에 data못 넣음\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return call(removePostAPI, action.data);\n\n        case 3:\n          result = _context8.sent;\n          _context8.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context8.next = 8;\n          return put({\n            //user Reducer 조작부분\n            type: REMOVE_POST_OF_ME,\n            //게시글 작성하면 게시글에 대한 id와\n            data: action.data //유저 id를 연결 해야하니까\n\n          });\n\n        case 8:\n          _context8.next = 15;\n          break;\n\n        case 10:\n          _context8.prev = 10;\n          _context8.t0 = _context8[\"catch\"](0);\n          console.error(_context8.t0);\n          _context8.next = 15;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context8.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 10]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data); //post/1/comment\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context9.next = 13;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.error(_context9.t0);\n          _context9.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context9.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(RETWEET_REQUEST, retWeet);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(LOAD_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n} //스크롤 움직이면 너무 많이 실행되기 때문에 한번만 되게끔 2초안에\n// 하나라도 action이 적은게 좋다\n\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.next = 2;\n          return all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPost), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19);\n} // function* watchAddPost() {\n//     yield throttle(\"LOG_POST_REQUEST\", addPost, 2000); //2초동안 리퀘스트 딱 1번만\n// }","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/ZeroCho/nodebird/prepare/front/sagas/post.js"],"names":["retWeet","uploadImages","likePost","unlikePost","loadPost","loadPosts","addPost","removePost","addComment","watchRetweet","watchUploadImages","watchLikePost","watchUnlikePost","watchLoadPost","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga","all","fork","put","takeLatest","throttle","call","axios","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","retWeetAPI","data","post","action","result","type","console","error","response","uploadImagesAPI","likePostAPI","patch","unlikePostAPI","loadPostAPI","get","loadPostsAPI","lastId","addPostAPI","id","removePostAPI","addCommentAPI","postId","watchLoadUserPosts","watchLoadHashtagPosts"],"mappings":"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","sourcesContent":["import { all, fork, put, takeLatest, throttle, call } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  LIKE_POST_REQUEST,\r\n  LIKE_POST_SUCCESS,\r\n  LIKE_POST_FAILURE,\r\n  UNLIKE_POST_REQUEST,\r\n  UNLIKE_POST_SUCCESS,\r\n  UNLIKE_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  LOAD_POST_REQUEST,\r\n  LOAD_POST_SUCCESS,\r\n  LOAD_POST_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  LOAD_POSTS_FAILURE,\r\n  UPLOAD_IMAGES_REQUEST,\r\n  UPLOAD_IMAGES_SUCCESS,\r\n  UPLOAD_IMAGES_FAILURE,\r\n  RETWEET_REQUEST,\r\n  RETWEET_SUCCESS,\r\n  RETWEET_FAILURE,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction retWeetAPI(data) {\r\n  return axios.post(`/post/${data}/retweet`);\r\n}\r\nfunction* retWeet(action) {\r\n  try {\r\n    const result = yield call(retWeetAPI, action.data);\r\n    yield put({\r\n      type: RETWEET_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: RETWEET_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n  return axios.post(\"/post/images\", data); //{name:data} 이렇게 하면 json이 되어버린다\r\n}\r\nfunction* uploadImages(action) {\r\n  try {\r\n    const result = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n  return axios.patch(`/post/${data}/like`);\r\n} //게시글의 일부분 수정하는거라 patch이다\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n  return axios.delete(`/post/${data}/like`);\r\n}\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadPostAPI(data) {\r\n  return axios.get(`/post/${data}`);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    const result = yield call(loadPostAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadPostsAPI(lastId) {\r\n  return axios.get(`/posts?lastId=${lastId || 0}`); //lastId가 undefined일 경우 0\r\n} //get에서 데이터를 넣을려면 주소뒤에 ?를 찍고 key는 값\r\n//주소만봐도 데이터가 담겨있어서 주소를 캐싱하면 데이터까지 같이 캐싱이됨\r\n//post. put.patch는 데이터캐싱이 안되는데 .get은 데이터캐싱도 할수 있어서 이점이 있다\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const result = yield call(loadPostsAPI, action.lastId);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/post\", data); //form데이터는 {} 이런걸로 감싸면 안됨\r\n  //뒷부분을 저렇게 해줘야 req.body 안에 들어간다\r\n}\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME, //게시글 작성하면 게시글에 대한 id와\r\n      data: result.data.id, //유저 id를 연결 해야하니까\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(`/post/${data}`); //delete에는 뒤에 data못 넣음\r\n}\r\nfunction* removePost(action) {\r\n  try {\r\n    const result = yield call(removePostAPI, action.data);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      //user Reducer 조작부분\r\n      type: REMOVE_POST_OF_ME, //게시글 작성하면 게시글에 대한 id와\r\n      data: action.data, //유저 id를 연결 해야하니까\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data); //post/1/comment\r\n}\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchRetweet() {\r\n  yield takeLatest(RETWEET_REQUEST, retWeet);\r\n}\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\nfunction* watchLoadPost() {\r\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\nfunction* watchLoadPosts() {\r\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n} //스크롤 움직이면 너무 많이 실행되기 때문에 한번만 되게끔 2초안에\r\n// 하나라도 action이 적은게 좋다\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchRetweet),\r\n    fork(watchUploadImages),\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n    fork(watchAddPost),\r\n    fork(watchLoadPost),\r\n    fork(watchLoadUserPosts),\r\n    fork(watchLoadHashtagPosts),\r\n    fork(watchLoadPosts),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n\r\n// function* watchAddPost() {\r\n//     yield throttle(\"LOG_POST_REQUEST\", addPost, 2000); //2초동안 리퀘스트 딱 1번만\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}