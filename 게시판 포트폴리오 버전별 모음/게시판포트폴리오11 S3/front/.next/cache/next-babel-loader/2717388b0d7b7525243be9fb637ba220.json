{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport { useRouter } from \"next/router\";\nimport AppLayout from \"../../components/AppLayout\";\nimport PostCard from \"../../components/PostCard\";\nimport { useSelector } from \"react-redux\";\n\nvar Post = function Post() {\n  var router = useRouter();\n  var id = router.query.id;\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      singlePost = _useSelector.singlePost; // if (router.isFallback) {\n  //   //클라이언트사이드 랜더링 할수 있게 기다릴수 잇게 할수 있음\n  //   return <div>로딩중...</div>;\n  // }\n\n\n  return /*#__PURE__*/_jsxs(AppLayout, {\n    children: [/*#__PURE__*/_jsxs(\"title\", {\n      children: [singlePost.User.nickname, \"\\u69D8\\u306E\\u6295\\u7A3F\"]\n    }), /*#__PURE__*/_jsx(\"meta\", {\n      name: \"description\",\n      content: singlePost.content\n    }), /*#__PURE__*/_jsx(\"meta\", {\n      property: \"og:title\",\n      content: \"\".concat(singlePost.User.nickname, \"\\uB2D8\\uC758 \\uAC8C\\uC2DC\\uAE00\")\n    }), /*#__PURE__*/_jsx(\"meta\", {\n      property: \"og:description\",\n      content: singlePost.content\n    }), /*#__PURE__*/_jsx(\"meta\", {\n      property: \"og:image\",\n      content: singlePost.Images[0] ? singlePost.Images[0].src : \"https://lcaohost:9000/favicon.png\"\n    }), /*#__PURE__*/_jsx(\"meta\", {\n      property: \"og:url\",\n      content: \"https://lcaohost:9000/post/\".concat(id)\n    }), /*#__PURE__*/_jsx(PostCard, {\n      post: singlePost\n    })]\n  });\n}; //export const getStaticProps = wrapper.getStaticProps(async (context) => {\n\n\n//겟스타틱, 겟프롭스안에서는 context.params.id 또는 context.query.id하면 위에 userrouter에 똑같이 접근가능.\nexport var __N_SSP = true;\nexport default Post;","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/portfolio-japanese/prepare/front/pages/post/[id].js"],"names":["React","useRouter","AppLayout","PostCard","useSelector","Post","router","id","query","state","post","singlePost","User","nickname","content","Images","src"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAMA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjB,MAAMC,MAAM,GAAGL,SAAS,EAAxB;AADiB,MAETM,EAFS,GAEFD,MAAM,CAACE,KAFL,CAETD,EAFS;;AAAA,qBAGMH,WAAW,CAAC,UAACK,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAHjB;AAAA,MAGTC,UAHS,gBAGTA,UAHS,EAKjB;AACA;AACA;AACA;;;AAEA,sBACE,MAAC,SAAD;AAAA,4BACE;AAAA,iBAAQA,UAAU,CAACC,IAAX,CAAgBC,QAAxB;AAAA,MADF,eAEE;AAAM,MAAA,IAAI,EAAC,aAAX;AAAyB,MAAA,OAAO,EAAEF,UAAU,CAACG;AAA7C,MAFF,eAGE;AAAM,MAAA,QAAQ,EAAC,UAAf;AAA0B,MAAA,OAAO,YAAKH,UAAU,CAACC,IAAX,CAAgBC,QAArB;AAAjC,MAHF,eAIE;AAAM,MAAA,QAAQ,EAAC,gBAAf;AAAgC,MAAA,OAAO,EAAEF,UAAU,CAACG;AAApD,MAJF,eAKE;AACE,MAAA,QAAQ,EAAC,UADX;AAEE,MAAA,OAAO,EAAEH,UAAU,CAACI,MAAX,CAAkB,CAAlB,IAAuBJ,UAAU,CAACI,MAAX,CAAkB,CAAlB,EAAqBC,GAA5C,GAAkD;AAF7D,MALF,eASE;AAAM,MAAA,QAAQ,EAAC,QAAf;AAAwB,MAAA,OAAO,uCAAgCT,EAAhC;AAA/B,MATF,eAUE,KAAC,QAAD;AAAU,MAAA,IAAI,EAAEI;AAAhB,MAVF;AAAA,IADF;AAcD,CAxBD,C,CA0BA;;;AAqBA;;AAEA,eAAeN,IAAf","sourcesContent":["import React from \"react\";\r\nimport { useRouter } from \"next/router\";\r\nimport { LOAD_MY_INFO_REQUEST } from \"../../reducers/user\";\r\nimport { LOAD_POST_REQUEST } from \"../../reducers/post\";\r\nimport wrapper from \"../../store/configureStore\";\r\nimport axios from \"axios\";\r\nimport { END } from \"redux-saga\";\r\nimport AppLayout from \"../../components/AppLayout\";\r\nimport PostCard from \"../../components/PostCard\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Post = () => {\r\n  const router = useRouter();\r\n  const { id } = router.query;\r\n  const { singlePost } = useSelector((state) => state.post);\r\n\r\n  // if (router.isFallback) {\r\n  //   //클라이언트사이드 랜더링 할수 있게 기다릴수 잇게 할수 있음\r\n  //   return <div>로딩중...</div>;\r\n  // }\r\n\r\n  return (\r\n    <AppLayout>\r\n      <title>{singlePost.User.nickname}様の投稿</title>\r\n      <meta name=\"description\" content={singlePost.content} />\r\n      <meta property=\"og:title\" content={`${singlePost.User.nickname}님의 게시글`} />\r\n      <meta property=\"og:description\" content={singlePost.content} />\r\n      <meta\r\n        property=\"og:image\"\r\n        content={singlePost.Images[0] ? singlePost.Images[0].src : \"https://lcaohost:9000/favicon.png\"}\r\n      />\r\n      <meta property=\"og:url\" content={`https://lcaohost:9000/post/${id}`} />\r\n      <PostCard post={singlePost} />\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\n//export const getStaticProps = wrapper.getStaticProps(async (context) => {\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  console.log(\"getServerSideProps start\");\r\n  console.log(\"context\", context);\r\n  const cookie = context.req ? context.req.headers.cookie : \"\";\r\n  axios.defaults.headers.Cookie = \"\";\r\n  if (context.req && cookie) {\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_POST_REQUEST,\r\n    data: context.params.id,\r\n  });\r\n  context.store.dispatch(END); //next redux wrapper에 이렇게 하라고 적혀있음\r\n  console.log(\"getServerSideProps end\");\r\n  await context.store.sagaTask.toPromise(); //이거는 configurestore에. sagaTask등록한거\r\n});\r\n\r\n//겟스타틱, 겟프롭스안에서는 context.params.id 또는 context.query.id하면 위에 userrouter에 똑같이 접근가능.\r\n\r\nexport default Post;\r\n"]},"metadata":{},"sourceType":"module"}