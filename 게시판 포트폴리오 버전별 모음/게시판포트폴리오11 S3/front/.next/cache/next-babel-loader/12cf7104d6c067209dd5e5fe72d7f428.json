{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, delay, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\nimport shortId from \"shortid\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data); //로그인 요청 함\n}\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortId.generate();\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            //게시글 작성하면 게시글에 대한 id와\n            data: id //유저 id를 연결 해야하니까\n\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/${data.id}/comment\", data); //로그인 요청 함\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n} // 하나라도 action이 적은게 좋다\n\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(Remove_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} // function* watchAddPost() {\n//     yield throttle(\"LOG_POST_REQUEST\", addPost, 2000); //2초동안 리퀘스트 딱 1번만\n// }","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/ZeroCho/nodebird/prepare/front/sagas/post.js"],"names":["addPost","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga","all","fork","delay","put","takeLatest","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","shortId","addPostAPI","data","post","action","id","generate","type","content","response","addCommentAPI","Remove_POST_REQUEST"],"mappings":"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","sourcesContent":["import { all, fork, delay, put, takeLatest } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\r\nimport shortId from \"shortid\";\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/post\", data); //로그인 요청 함\r\n}\r\nfunction* addPost(action) {\r\n  try {\r\n    //const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: { id, content: action.data },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME, //게시글 작성하면 게시글에 대한 id와\r\n      data: id, //유저 id를 연결 해야하니까\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(\"/api/post/${data.id}/comment\", data); //로그인 요청 함\r\n}\r\nfunction* addComment(action) {\r\n  try {\r\n    //const result = yield call(addCommentAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// 하나라도 action이 적은게 좋다\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(Remove_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\r\n}\r\n\r\n// function* watchAddPost() {\r\n//     yield throttle(\"LOG_POST_REQUEST\", addPost, 2000); //2초동안 리퀘스트 딱 1번만\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}