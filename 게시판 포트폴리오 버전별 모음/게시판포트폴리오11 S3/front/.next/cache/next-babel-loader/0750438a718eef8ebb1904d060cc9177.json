{"ast":null,"code":"import { all, fork, delay, put, takeLatest, throttle, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n} //게시글의 일부분 수정하는거라 patch이다\n\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/posts\", data); //로그인 요청 함\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  }); //로그인 요청 함\n  //뒷부분을 저렇게 해줘야 req.body 안에 들어간다\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      //게시글 작성하면 게시글에 대한 id와\n      data: result.data.id //유저 id를 연결 해야하니까\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data); //로그인 요청 함\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      //user Reducer 조작부분\n      type: REMOVE_POST_OF_ME,\n      //게시글 작성하면 게시글에 대한 id와\n      data: action.data //유저 id를 연결 해야하니까\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); //post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\n} //스크롤 움직이면 너무 많이 실행되기 때문에 한번만 되게끔 2초안에\n// 하나라도 action이 적은게 좋다\n\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n} // function* watchAddPost() {\n//     yield throttle(\"LOG_POST_REQUEST\", addPost, 2000); //2초동안 리퀘스트 딱 1번만\n// }","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/ZeroCho/nodebird/prepare/front/sagas/post.js"],"names":["all","fork","delay","put","takeLatest","throttle","call","axios","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","likePostAPI","data","patch","likePost","action","result","type","err","console","error","response","unlikePostAPI","delete","unlikePost","UNLIKE_POSTS_FAILURE","loadPostsAPI","get","loadPosts","addPostAPI","post","content","addPost","id","shortId","generate","removePostAPI","removePost","addCommentAPI","postId","addComment","watchLikePost","watchUnlikePost","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, delay, put, takeLatest, throttle, call } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  LIKE_POST_REQUEST,\r\n  LIKE_POST_SUCCESS,\r\n  LIKE_POST_FAILURE,\r\n  UNLIKE_POST_REQUEST,\r\n  UNLIKE_POST_SUCCESS,\r\n  UNLIKE_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  LOAD_POSTS_FAILURE,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction likePostAPI(data) {\r\n  return axios.patch(`/post/${data}/like`);\r\n} //게시글의 일부분 수정하는거라 patch이다\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n  return axios.delete(`/post/${data}/like`);\r\n}\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UNLIKE_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get(\"/posts\", data); //로그인 요청 함\r\n}\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const result = yield call(loadPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/post\", { content: data }); //로그인 요청 함\r\n  //뒷부분을 저렇게 해줘야 req.body 안에 들어간다\r\n}\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME, //게시글 작성하면 게시글에 대한 id와\r\n      data: result.data.id, //유저 id를 연결 해야하니까\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(\"/api/post\", data); //로그인 요청 함\r\n}\r\nfunction* removePost(action) {\r\n  try {\r\n    //const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      //user Reducer 조작부분\r\n      type: REMOVE_POST_OF_ME, //게시글 작성하면 게시글에 대한 id와\r\n      data: action.data, //유저 id를 연결 해야하니까\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data); //post/1/comment\r\n}\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\r\n} //스크롤 움직이면 너무 많이 실행되기 때문에 한번만 되게끔 2초안에\r\n\r\n// 하나라도 action이 적은게 좋다\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n\r\n// function* watchAddPost() {\r\n//     yield throttle(\"LOG_POST_REQUEST\", addPost, 2000); //2초동안 리퀘스트 딱 1번만\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}