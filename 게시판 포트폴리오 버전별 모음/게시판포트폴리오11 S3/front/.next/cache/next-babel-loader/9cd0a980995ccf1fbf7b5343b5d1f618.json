{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(follow),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(unfollow),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchFollow),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnfollow),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, delay, put, takeLatest, call } from \"redux-saga/effects\"; //여기안에 delay, debounce, throttle, takeLastest, takeEvery, takeMaybe 같은것도 있음\n//지금 적은것들이 사가의 effect라 불림\n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FOLLOW_REQUEST, UNFOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE } from \"../reducers/user\";\nimport axios from \"axios\"; //이거는 컴바인 리듀스 같은게 필요 없음.\n//logInAPI이거는 generator안임. * 붙이면 안됨\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data); //로그인 요청 함\n} //항상 effect 앞에는 yield(일드)를 붙여준다\n//call, fork차이, fork는 비동기 함수 호출, call은 동기함수 호출\n//call을 하면 로그인 api가 리턴 할때까지 기다림. fork는 비동기라 요청보내버리고\n//결과 안 기다리고 바로 다음으로 감, call은 await이랑 비슷\n//그리고 데이터를 보낼때 logInAPI(action.data) 이렇게 해야하는데, call을 쓰면\n// 이걸 펼쳐줘야함 call(logInAPI, action.data); 밑에 처럼 이렇게\n//첫번쨰 자리가 함수고, 그 다음에 매개변수, 인수임 ,를 써서 더 주기 가능\n//굳이 yield를 안 붙여도되지만 붙이는 이유가 테스트 때문, 동작 보장이 되는가?\n\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log(\"Saga User.js\"); //const result = yield call(logInAPI, action.data); //이렇게 결과값 요청후 받음\n\n          _context.next = 4;\n          return delay(1000);\n\n        case 4:\n          _context.next = 6;\n          return put({\n            type: LOG_IN_SUCCESS,\n            //put은 dispatch라고 생각하면됨\n            data: action.data //성공 결과값, 성공후 reducer user.js switch로\n\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n} //애네들이 비동기 액션 크리에이터, thunk는 비동기 크리에이터를 직접 했지만\n//Saga는 이벤트 리스너 같은 역할, 비유 하자면\n//로그인 액션이 들어오면,로그인 제너레이터 함수를 실행 하도록, * 있는게 제너레이터 함수\n//take는 문제가 1회성임. 로그인하고 로그아웃하면 로그인 이벤트가 사라진다는 말\n//그래서 while을 사용하는거임. 이걸해야 진정한 이벤트 리스너 ㅋㅋ (원노트 참조)\n//근데 반복문 적는건 좀 보기 안 좋고 더 좋은 기능인 takeEvery를 사용\n//takeLatest 는 마지막에 클릭한거. (로딩 도중 기준) 여러번 클릭 방지, 첫번째꺼는 takeLeading\n\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\", data); //로그인 요청 함\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 12;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 12;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction singUpAPI(data) {\n  return axios.post(\"http://localhost:3306/user\", data); //로그인 요청 함\n} //data안에 Email, Password, NickName 가 들어있다. signup.js 참조\n//get이랑 delete요청은 데이터를 못 보내지만, post,put,patch는 넘길수 있다. 두번째로\n\n\nfunction signUp(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function signUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(singUpAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          //yield delay(1000); //throw new Error(\"\")를 하게 되면 바로 밑에 catch로 간다\n          console.log(result);\n          _context3.next = 7;\n          return put({\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 7:\n          _context3.next = 14;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 14;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\nfunction followAPI() {\n  return axios.post(\"/api/logout\", data); //로그인 요청 함\n}\n\nfunction follow(action) {\n  return _regeneratorRuntime.wrap(function follow$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context4.next = 5;\n          return put({\n            type: FOLLOW_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context4.next = 12;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 12;\n          return put({\n            type: FOLLOW_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 7]]);\n}\n\nfunction unfollowAPI() {\n  return axios.post(\"/api/logout\", data); //로그인 요청 함\n}\n\nfunction unfollow(action) {\n  return _regeneratorRuntime.wrap(function unfollow$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context5.next = 5;\n          return put({\n            type: UNFOLLOW_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context5.next = 12;\n          break;\n\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 12;\n          return put({\n            type: UNFOLLOW_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 7]]);\n}\n\nfunction watchFollow() {\n  return _regeneratorRuntime.wrap(function watchFollow$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(FOLLOW_REQUEST, follow);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} //로그인이라는 action이 실행될떄까지 기다리겠다.\n\n\nfunction watchUnfollow() {\n  return _regeneratorRuntime.wrap(function watchUnfollow$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(UNFOLLOW_REQUEST, unfollow);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n} //이벤트 리스너를 만드는거임\n\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOG_IN_REQUEST, logIn);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n} //로그인이라는 action이 실행될떄까지 기다리겠다.\n\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, logOut);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return all([fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/ZeroCho/nodebird/prepare/front/sagas/user.js"],"names":["logIn","logOut","signUp","follow","unfollow","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSaga","all","fork","delay","put","takeLatest","call","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","FOLLOW_REQUEST","UNFOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","axios","logInAPI","data","post","action","console","log","type","error","response","logOutAPI","singUpAPI","result","followAPI","unfollowAPI"],"mappings":"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","sourcesContent":["import { all, fork, delay, put, takeLatest, call } from \"redux-saga/effects\";\r\n//여기안에 delay, debounce, throttle, takeLastest, takeEvery, takeMaybe 같은것도 있음\r\n//지금 적은것들이 사가의 effect라 불림\r\nimport {\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  FOLLOW_REQUEST,\r\n  UNFOLLOW_REQUEST,\r\n  FOLLOW_SUCCESS,\r\n  FOLLOW_FAILURE,\r\n  UNFOLLOW_SUCCESS,\r\n  UNFOLLOW_FAILURE,\r\n} from \"../reducers/user\";\r\nimport axios from \"axios\";\r\n//이거는 컴바인 리듀스 같은게 필요 없음.\r\n\r\n//logInAPI이거는 generator안임. * 붙이면 안됨\r\nfunction logInAPI(data) {\r\n  return axios.post(\"/api/login\", data); //로그인 요청 함\r\n}\r\n\r\n//항상 effect 앞에는 yield(일드)를 붙여준다\r\n//call, fork차이, fork는 비동기 함수 호출, call은 동기함수 호출\r\n//call을 하면 로그인 api가 리턴 할때까지 기다림. fork는 비동기라 요청보내버리고\r\n//결과 안 기다리고 바로 다음으로 감, call은 await이랑 비슷\r\n\r\n//그리고 데이터를 보낼때 logInAPI(action.data) 이렇게 해야하는데, call을 쓰면\r\n// 이걸 펼쳐줘야함 call(logInAPI, action.data); 밑에 처럼 이렇게\r\n//첫번쨰 자리가 함수고, 그 다음에 매개변수, 인수임 ,를 써서 더 주기 가능\r\n//굳이 yield를 안 붙여도되지만 붙이는 이유가 테스트 때문, 동작 보장이 되는가?\r\nfunction* logIn(action) {\r\n  try {\r\n    console.log(\"Saga User.js\");\r\n    //const result = yield call(logInAPI, action.data); //이렇게 결과값 요청후 받음\r\n    yield delay(1000); //서버 만들어 질때까지 delay로 비동기 효과 주기\r\n    yield put({\r\n      type: LOG_IN_SUCCESS, //put은 dispatch라고 생각하면됨\r\n      data: action.data, //성공 결과값, 성공후 reducer user.js switch로\r\n    }); //중요한게 사가에서 자동으로 try,catch로 상황보고 석세스나\r\n    //failure보내기 때문에 개인이 따로 액션을 할 필요가 없다\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    }); //요청이 항상 성공하는건 아니니까, try, catch 쓰면됨\r\n  }\r\n}\r\n//애네들이 비동기 액션 크리에이터, thunk는 비동기 크리에이터를 직접 했지만\r\n//Saga는 이벤트 리스너 같은 역할, 비유 하자면\r\n//로그인 액션이 들어오면,로그인 제너레이터 함수를 실행 하도록, * 있는게 제너레이터 함수\r\n\r\n//take는 문제가 1회성임. 로그인하고 로그아웃하면 로그인 이벤트가 사라진다는 말\r\n//그래서 while을 사용하는거임. 이걸해야 진정한 이벤트 리스너 ㅋㅋ (원노트 참조)\r\n//근데 반복문 적는건 좀 보기 안 좋고 더 좋은 기능인 takeEvery를 사용\r\n//takeLatest 는 마지막에 클릭한거. (로딩 도중 기준) 여러번 클릭 방지, 첫번째꺼는 takeLeading\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/logout\", data); //로그인 요청 함\r\n}\r\nfunction* logOut() {\r\n  try {\r\n    //const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction singUpAPI(data) {\r\n  return axios.post(\"http://localhost:3306/user\", data); //로그인 요청 함\r\n} //data안에 Email, Password, NickName 가 들어있다. signup.js 참조\r\n//get이랑 delete요청은 데이터를 못 보내지만, post,put,patch는 넘길수 있다. 두번째로\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    const result = yield call(singUpAPI, action.data);\r\n    //yield delay(1000); //throw new Error(\"\")를 하게 되면 바로 밑에 catch로 간다\r\n    console.log(result);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction followAPI() {\r\n  return axios.post(\"/api/logout\", data); //로그인 요청 함\r\n}\r\nfunction* follow(action) {\r\n  try {\r\n    //const result = yield call(followAPI);\r\n    yield delay(1000); //throw new Error(\"\")를 하게 되면 바로 밑에 catch로 간다\r\n    yield put({\r\n      type: FOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: FOLLOW_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unfollowAPI() {\r\n  return axios.post(\"/api/logout\", data); //로그인 요청 함\r\n}\r\nfunction* unfollow(action) {\r\n  try {\r\n    //const result = yield call(unfollowAPI);\r\n    yield delay(1000); //throw new Error(\"\")를 하게 되면 바로 밑에 catch로 간다\r\n    yield put({\r\n      type: UNFOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UNFOLLOW_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchFollow() {\r\n  yield takeLatest(FOLLOW_REQUEST, follow);\r\n} //로그인이라는 action이 실행될떄까지 기다리겠다.\r\n\r\nfunction* watchUnfollow() {\r\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n\r\n//이벤트 리스너를 만드는거임\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n} //로그인이라는 action이 실행될떄까지 기다리겠다.\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}