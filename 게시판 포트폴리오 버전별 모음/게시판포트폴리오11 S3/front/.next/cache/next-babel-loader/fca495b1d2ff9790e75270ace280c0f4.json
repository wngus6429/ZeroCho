{"ast":null,"code":"//import shortId from \"shortid\";\nimport produce from \"immer\"; //import faker from \"faker\";\n//import { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"./user\";\n//댓글 객체에 접근 할려면 게시글을 찾고 아이디를 통해서 찾고\n//그 안에 Comments 여기로 접근,\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  //이미지 경로들\n  hasMorePosts: true,\n  //처음에 가져올 시도를 해야하니 당연 true\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n}; //왜 User, Image, Comment만 첫글자에 대문자냐? db에서 쓰는 시퀄라이즈랑 관계있는데.어떤 정보와 다른 정보가 관게가 있으면 그것을 합쳐줌\n//합쳐준 애들은 대문자가 되기 때문 , id나 content는 게시글 속성이고\n//대문자가 있는 것들은 id가 있어야함\n//미리 서버 개발자한테 물어보는게 좋지\n//action은 객체이다\n//더미데이터를 나중에 성능최적화까지 고려하면 수천개 하는게 좋음\n//하나도 끊김없이 렌더링 되는거 그게 실력, 화면만 잘 만들면 하수\n//더미데이터로 여러가지 테스트, 무한스크롤링 등등 해볼수 있다\n//프론트엔드 개발자는 백엔드 개발자가 준비가 덜 되었더라도, 리덕스, 사가, 딜레이같은거\n//미리 프론트를 만들어둬야함. 데이터구조는 미리 회의 해두는게 좋지\n// export const generateDummyPost = (number) =>\n//   Array(number)\n//     .fill()\n//     .map(() => ({\n//       id: shortId.generate(),\n//       User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(), //faker 공식문서 참조\n//       },\n//       content: faker.lorem.paragraph(),\n//       Images: [\n//         {\n//           src: faker.image.image(),\n//         },\n//       ],\n//       Comments: [\n//         {\n//           User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//           },\n//           content: faker.lorem.sentence(),\n//         },\n//       ],\n//     }));\n\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\nexport const REMOVE_IMAGE = \"REMOVE_IMAGE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n}); // export const dummyPost = (data) => ({\n//   id: data.id, //AddPost 할때 id 만들어줌\n//   content: data.content,\n//   User: {\n//     id: 1,\n//     nickname: \"제로초\",\n//   },\n//   Images: [],\n//   Comments: [],\n// });\n// export const dummyComment = (data) => ({\n//   id: shortId.generate(), //이놈을 key로 사용중\n//   content: data,\n//   User: {\n//     id: 1,\n//     nickname: \"더미코멘트\",\n//   },\n// });\n//reducer란 이전 상태를 액션을 통해 다음 상태로 만들어내는\n//immer가 불변성을 도와줌\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case RETWEET_REQUEST:\n      draft.retweetLoading = true;\n      draft.retweetDone = false;\n      draft.retweetError = null;\n      break;\n\n    case RETWEET_SUCCESS:\n      draft.retweetLoading = false;\n      draft.retweetDone = true;\n      draft.mainPosts.unshift(action.data);\n      break;\n\n    case RETWEET_FAILURE:\n      draft.retweetLoading = false;\n      draft.retweetError = action.error;\n      break;\n\n    case REMOVE_IMAGE:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesDone = false;\n      draft.uploadImagesError = null;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      draft.imagePaths = action.data;\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesDone = true;\n      break;\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n\n    case LIKE_POST_REQUEST:\n      draft.likePostLoading = true;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n      break;\n    //break 꼭 적어야함\n\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n\n    case LIKE_POST_FAILURE:\n      draft.likePostLoading = false;\n      draft.likePostError = action.error;\n      break;\n\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostLoading = true;\n      draft.unlikePostDone = false;\n      draft.unlikePostError = null;\n      break;\n    //break 꼭 적어야함\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id !== action.data.UserId); //원래 splice가 좋긴함, 제로초는 귀찮대\n\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostLoading = false;\n      draft.unlikePostError = action.error;\n      break;\n\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostDone = false;\n      draft.loadPostError = null;\n      break;\n\n    case LOAD_POST_SUCCESS:\n      draft.loadPostLoading = false;\n      draft.loadPostDone = true;\n      draft.singlePost = draft.mainPosts.concat(action.data); //하나만 하기에 singlePost\n\n      break;\n\n    case LOAD_POST_FAILURE:\n      draft.loadPostLoading = false;\n      draft.loadPostError = action.error;\n      break;\n\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n    //break 꼭 적어야함\n    // case LOAD_POSTS_SUCCESS:\n    //   draft.loadPostLoading = false;\n    //   draft.loadPostDone = true;\n    //   draft.singlePost = action.data;\n    //   break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = draft.mainPosts.concat(action.data); //action.data에 더미데이터들이 들어있을거고 그거랑 기존데이터랑 합쳐줌, 계속 추가하는거지\n\n      draft.hasMorePosts = action.data.length === 10; //게시글 50개만 보겟다고\n\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n    //break 꼭 적어야함\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data);\n      draft.imagePaths = []; //이미지패스 초기화, 그래야 이미지업로드 후 대기 사진 사라짐\n\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n      post.Comments.unshift(action.data);\n      draft.addCommentLoading = false;\n      draft.addCommentDone = true;\n      break;\n    //   //action.data.content, postId, userId 가 들어있겟지\n    //   //불변성의 핵심은 바뀌는것만 새로운 객체로 만들고 나머지느 ㄴ객체는 참조를 유지함\n    //   //그래야 바뀌는것만 바뀌고 안바뀌는거는 참조가 계속 유지되서 메모리를 절약 하는거임\n    //   const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n    //   const post = { ...state.mainPosts[postIndex] };\n    //   post.Comments = [dummyComment(action.data.content), ...post.Comments];\n    //   const mainPosts = [...state.mainPosts];\n    //   mainPosts[postIndex] = post;\n    //   return {\n    //     ...state,\n    //     mainPosts,\n    //     addCommentLoading: false,\n    //     addCommentDone: true,\n    //   }; //dummyPost가 앞에 있어야 함 뒤에 있으면 게시글 맨 아래에 추가됨\n    // }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer; // const ADD_POST = \"ADD_POST\";\n// //이렇게 빼주면 좋은점이 밑에 ,case ADD_POST처럼 const값을 재활용 할수 있음\n// //그리고 변수 선언으로 인해 오타 방지\n// export const addPost = {\n//   type: ADD_POST,\n// };","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/ZeroCho/nodebird/prepare/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePosts","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostLoading","loadPostDone","loadPostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","reducer","state","action","draft","unshift","error","filter","v","i","post","find","id","PostId","Likers","push","UserId","singlePost","concat","length","Comments"],"mappings":"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","sourcesContent":["//import shortId from \"shortid\";\r\nimport produce from \"immer\";\r\n//import faker from \"faker\";\r\n//import { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"./user\";\r\n\r\n//댓글 객체에 접근 할려면 게시글을 찾고 아이디를 통해서 찾고\r\n//그 안에 Comments 여기로 접근,\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [], //이미지 경로들\r\n  hasMorePosts: true, //처음에 가져올 시도를 해야하니 당연 true\r\n  likePostLoading: false,\r\n  likePostDone: false,\r\n  likePostError: null,\r\n  unlikePostLoading: false,\r\n  unlikePostDone: false,\r\n  unlikePostError: null,\r\n\r\n  loadPostLoading: false,\r\n  loadPostDone: false,\r\n  loadPostError: null,\r\n\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n  uploadImagesLoading: false,\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n  retweetLoading: false,\r\n  retweetDone: false,\r\n  retweetError: null,\r\n};\r\n//왜 User, Image, Comment만 첫글자에 대문자냐? db에서 쓰는 시퀄라이즈랑 관계있는데.어떤 정보와 다른 정보가 관게가 있으면 그것을 합쳐줌\r\n//합쳐준 애들은 대문자가 되기 때문 , id나 content는 게시글 속성이고\r\n//대문자가 있는 것들은 id가 있어야함\r\n//미리 서버 개발자한테 물어보는게 좋지\r\n//action은 객체이다\r\n\r\n//더미데이터를 나중에 성능최적화까지 고려하면 수천개 하는게 좋음\r\n//하나도 끊김없이 렌더링 되는거 그게 실력, 화면만 잘 만들면 하수\r\n//더미데이터로 여러가지 테스트, 무한스크롤링 등등 해볼수 있다\r\n//프론트엔드 개발자는 백엔드 개발자가 준비가 덜 되었더라도, 리덕스, 사가, 딜레이같은거\r\n//미리 프론트를 만들어둬야함. 데이터구조는 미리 회의 해두는게 좋지\r\n\r\n// export const generateDummyPost = (number) =>\r\n//   Array(number)\r\n//     .fill()\r\n//     .map(() => ({\r\n//       id: shortId.generate(),\r\n//       User: {\r\n//         id: shortId.generate(),\r\n//         nickname: faker.name.findName(), //faker 공식문서 참조\r\n//       },\r\n//       content: faker.lorem.paragraph(),\r\n//       Images: [\r\n//         {\r\n//           src: faker.image.image(),\r\n//         },\r\n//       ],\r\n//       Comments: [\r\n//         {\r\n//           User: {\r\n//             id: shortId.generate(),\r\n//             nickname: faker.name.findName(),\r\n//           },\r\n//           content: faker.lorem.sentence(),\r\n//         },\r\n//       ],\r\n//     }));\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\r\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\r\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\r\n\r\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\r\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\r\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\r\n\r\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\r\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\r\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\r\n\r\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\r\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\r\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\r\n\r\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\r\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\r\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\r\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\r\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\r\n\r\nexport const REMOVE_IMAGE = \"REMOVE_IMAGE\";\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\n// export const dummyPost = (data) => ({\r\n//   id: data.id, //AddPost 할때 id 만들어줌\r\n//   content: data.content,\r\n//   User: {\r\n//     id: 1,\r\n//     nickname: \"제로초\",\r\n//   },\r\n//   Images: [],\r\n//   Comments: [],\r\n// });\r\n\r\n// export const dummyComment = (data) => ({\r\n//   id: shortId.generate(), //이놈을 key로 사용중\r\n//   content: data,\r\n//   User: {\r\n//     id: 1,\r\n//     nickname: \"더미코멘트\",\r\n//   },\r\n// });\r\n\r\n//reducer란 이전 상태를 액션을 통해 다음 상태로 만들어내는\r\n//immer가 불변성을 도와줌\r\nconst reducer = (state = initialState, action) =>\r\n  produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case RETWEET_REQUEST:\r\n        draft.retweetLoading = true;\r\n        draft.retweetDone = false;\r\n        draft.retweetError = null;\r\n        break;\r\n      case RETWEET_SUCCESS:\r\n        draft.retweetLoading = false;\r\n        draft.retweetDone = true;\r\n        draft.mainPosts.unshift(action.data);\r\n        break;\r\n      case RETWEET_FAILURE:\r\n        draft.retweetLoading = false;\r\n        draft.retweetError = action.error;\r\n        break;\r\n      case REMOVE_IMAGE:\r\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n        break;\r\n      case UPLOAD_IMAGES_REQUEST:\r\n        draft.uploadImagesLoading = true;\r\n        draft.uploadImagesDone = false;\r\n        draft.uploadImagesError = null;\r\n        break;\r\n      case UPLOAD_IMAGES_SUCCESS:\r\n        draft.imagePaths = action.data;\r\n        draft.uploadImagesLoading = false;\r\n        draft.uploadImagesDone = true;\r\n        break;\r\n      case UPLOAD_IMAGES_FAILURE:\r\n        draft.uploadImagesLoading = false;\r\n        draft.uploadImagesError = action.error;\r\n        break;\r\n      case LIKE_POST_REQUEST:\r\n        draft.likePostLoading = true;\r\n        draft.likePostDone = false;\r\n        draft.likePostError = null;\r\n        break; //break 꼭 적어야함\r\n      case LIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers.push({ id: action.data.UserId });\r\n        draft.likePostLoading = false;\r\n        draft.likePostDone = true;\r\n        break;\r\n      }\r\n      case LIKE_POST_FAILURE:\r\n        draft.likePostLoading = false;\r\n        draft.likePostError = action.error;\r\n        break;\r\n      case UNLIKE_POST_REQUEST:\r\n        draft.unlikePostLoading = true;\r\n        draft.unlikePostDone = false;\r\n        draft.unlikePostError = null;\r\n        break; //break 꼭 적어야함\r\n      case UNLIKE_POST_SUCCESS: {\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId); //원래 splice가 좋긴함, 제로초는 귀찮대\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostDone = true;\r\n        break;\r\n      }\r\n      case UNLIKE_POST_FAILURE:\r\n        draft.unlikePostLoading = false;\r\n        draft.unlikePostError = action.error;\r\n        break;\r\n\r\n      case LOAD_POST_REQUEST:\r\n        draft.loadPostLoading = true;\r\n        draft.loadPostDone = false;\r\n        draft.loadPostError = null;\r\n        break;\r\n      case LOAD_POST_SUCCESS:\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostDone = true;\r\n        draft.singlePost = draft.mainPosts.concat(action.data); //하나만 하기에 singlePost\r\n        break;\r\n      case LOAD_POST_FAILURE:\r\n        draft.loadPostLoading = false;\r\n        draft.loadPostError = action.error;\r\n        break;\r\n\r\n      case LOAD_POSTS_REQUEST:\r\n        draft.loadPostsLoading = true;\r\n        draft.loadPostsDone = false;\r\n        draft.loadPostsError = null;\r\n        break; //break 꼭 적어야함\r\n      // case LOAD_POSTS_SUCCESS:\r\n      //   draft.loadPostLoading = false;\r\n      //   draft.loadPostDone = true;\r\n      //   draft.singlePost = action.data;\r\n      //   break;\r\n      case LOAD_POSTS_SUCCESS:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsDone = true;\r\n        draft.mainPosts = draft.mainPosts.concat(action.data);\r\n        //action.data에 더미데이터들이 들어있을거고 그거랑 기존데이터랑 합쳐줌, 계속 추가하는거지\r\n        draft.hasMorePosts = action.data.length === 10; //게시글 50개만 보겟다고\r\n        break;\r\n      case LOAD_POSTS_FAILURE:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsError = action.error;\r\n        break;\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break; //break 꼭 적어야함\r\n      case ADD_POST_SUCCESS:\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.mainPosts.unshift(action.data);\r\n        draft.imagePaths = []; //이미지패스 초기화, 그래야 이미지업로드 후 대기 사진 사라짐\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n        break;\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n      case ADD_COMMENT_SUCCESS:\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n        post.Comments.unshift(action.data);\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n      //   //action.data.content, postId, userId 가 들어있겟지\r\n      //   //불변성의 핵심은 바뀌는것만 새로운 객체로 만들고 나머지느 ㄴ객체는 참조를 유지함\r\n      //   //그래야 바뀌는것만 바뀌고 안바뀌는거는 참조가 계속 유지되서 메모리를 절약 하는거임\r\n      //   const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n      //   const post = { ...state.mainPosts[postIndex] };\r\n      //   post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      //   const mainPosts = [...state.mainPosts];\r\n      //   mainPosts[postIndex] = post;\r\n      //   return {\r\n      //     ...state,\r\n      //     mainPosts,\r\n      //     addCommentLoading: false,\r\n      //     addCommentDone: true,\r\n      //   }; //dummyPost가 앞에 있어야 함 뒤에 있으면 게시글 맨 아래에 추가됨\r\n      // }\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\nexport default reducer;\r\n\r\n// const ADD_POST = \"ADD_POST\";\r\n// //이렇게 빼주면 좋은점이 밑에 ,case ADD_POST처럼 const값을 재활용 할수 있음\r\n// //그리고 변수 선언으로 인해 오타 방지\r\n// export const addPost = {\r\n//   type: ADD_POST,\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}