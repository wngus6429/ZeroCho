{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\"; //import { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"./user\";\n//댓글 객체에 접근 할려면 게시글을 찾고 아이디를 통해서 찾고\n//그 안에 Comments 여기로 접근,\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"제로초\"\n    },\n    content: \"첫번째 게시글 #해시태그, #익스프레스\",\n    Images: [{\n      id: shortId.generate(),\n      src: \"https://t2.daumcdn.net/thumb/R720x0/?fname=http://t1.daumcdn.net/brunch/service/user/TRE/image/jSbbIDabdmD5S54u1gX-1W64ok0\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://www.artinsight.co.kr/data/news/1910/833266554_iSIxjXoa_maxresdefault-3.jpg\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRHrJIHYecs7LONs1yBDv7FmML5sSCoESzg9Q&usqp=CAU\"\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"nero\"\n      },\n      content: \"우와 개정판이 나왔군요\"\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"hero\"\n      },\n      content: \"얼른 사고싶어요\"\n    }]\n  }],\n  imagePaths: [],\n  //이미지 경로들\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; //왜 User, Image, Comment만 첫글자에 대문자냐? db에서 쓰는 시퀄라이즈랑 관계있는데.어떤 정보와 다른 정보가 관게가 있으면 그것을 합쳐줌\n//합쳐준 애들은 대문자가 되기 때문 , id나 content는 게시글 속성이고\n//대문자가 있는 것들은 id가 있어야함\n//미리 서버 개발자한테 물어보는게 좋지\n//action은 객체이다\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nexport const dummyPost = data => ({\n  id: data.id,\n  //AddPost 할때 id 만들어줌\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  },\n  Images: [],\n  Comments: []\n});\nexport const dummyComment = data => ({\n  id: shortId.generate(),\n  //이놈을 key로 사용중\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"더미코멘트\"\n  }\n}); //reducer란 이전 상태를 액션을 통해 다음 상태로 만들어내는\n//immer가 불변성을 도와줌\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n    //break 꼭 적어야함\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(dummyPost(action.data));\n      break;\n    //dummyPost가 앞에 있어야 함 뒤에 있으면 게시글 맨 아래에 추가됨\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = true;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      break;\n    //dummyPost가 앞에 있어야 함 뒤에 있으면 게시글 맨 아래에 추가됨\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n\n    case ADD_COMMENT_SUCCESS:\n      const post = draft.mainPosts.find(v => v.id === action.data.postId);\n      post.Comments.unshift(dummyComment(action.data.content));\n      draft.addCommentLoading = false;\n      draft.addCommentDone = true;\n      break;\n    //   //action.data.content, postId, userId 가 들어있겟지\n    //   //불변성의 핵심은 바뀌는것만 새로운 객체로 만들고 나머지느 ㄴ객체는 참조를 유지함\n    //   //그래야 바뀌는것만 바뀌고 안바뀌는거는 참조가 계속 유지되서 메모리를 절약 하는거임\n    //   const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n    //   const post = { ...state.mainPosts[postIndex] };\n    //   post.Comments = [dummyComment(action.data.content), ...post.Comments];\n    //   const mainPosts = [...state.mainPosts];\n    //   mainPosts[postIndex] = post;\n    //   return {\n    //     ...state,\n    //     mainPosts,\n    //     addCommentLoading: false,\n    //     addCommentDone: true,\n    //   }; //dummyPost가 앞에 있어야 함 뒤에 있으면 게시글 맨 아래에 추가됨\n    // }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer; // const ADD_POST = \"ADD_POST\";\n// //이렇게 빼주면 좋은점이 밑에 ,case ADD_POST처럼 const값을 재활용 할수 있음\n// //그리고 변수 선언으로 인해 오타 방지\n// export const addPost = {\n//   type: ADD_POST,\n// };","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/ZeroCho/nodebird/prepare/front/reducers/post.js"],"names":["shortId","produce","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","v","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from \"shortid\";\r\nimport produce from \"immer\";\r\n//import { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"./user\";\r\n\r\n//댓글 객체에 접근 할려면 게시글을 찾고 아이디를 통해서 찾고\r\n//그 안에 Comments 여기로 접근,\r\nexport const initialState = {\r\n  mainPosts: [\r\n    {\r\n      id: 1,\r\n      User: {\r\n        id: 1,\r\n        nickname: \"제로초\",\r\n      },\r\n      content: \"첫번째 게시글 #해시태그, #익스프레스\",\r\n      Images: [\r\n        {\r\n          id: shortId.generate(),\r\n          src:\r\n            \"https://t2.daumcdn.net/thumb/R720x0/?fname=http://t1.daumcdn.net/brunch/service/user/TRE/image/jSbbIDabdmD5S54u1gX-1W64ok0\",\r\n        },\r\n        {\r\n          id: shortId.generate(),\r\n          src: \"https://www.artinsight.co.kr/data/news/1910/833266554_iSIxjXoa_maxresdefault-3.jpg\",\r\n        },\r\n        {\r\n          id: shortId.generate(),\r\n          src:\r\n            \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRHrJIHYecs7LONs1yBDv7FmML5sSCoESzg9Q&usqp=CAU\",\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: \"nero\",\r\n          },\r\n          content: \"우와 개정판이 나왔군요\",\r\n        },\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: \"hero\",\r\n          },\r\n          content: \"얼른 사고싶어요\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  imagePaths: [], //이미지 경로들\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n//왜 User, Image, Comment만 첫글자에 대문자냐? db에서 쓰는 시퀄라이즈랑 관계있는데.어떤 정보와 다른 정보가 관게가 있으면 그것을 합쳐줌\r\n//합쳐준 애들은 대문자가 되기 때문 , id나 content는 게시글 속성이고\r\n//대문자가 있는 것들은 id가 있어야함\r\n//미리 서버 개발자한테 물어보는게 좋지\r\n//action은 객체이다\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const dummyPost = (data) => ({\r\n  id: data.id, //AddPost 할때 id 만들어줌\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"제로초\",\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nexport const dummyComment = (data) => ({\r\n  id: shortId.generate(), //이놈을 key로 사용중\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"더미코멘트\",\r\n  },\r\n});\r\n\r\n//reducer란 이전 상태를 액션을 통해 다음 상태로 만들어내는\r\n//immer가 불변성을 도와줌\r\nconst reducer = (state = initialState, action) =>\r\n  produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break; //break 꼭 적어야함\r\n      case ADD_POST_SUCCESS:\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        break; //dummyPost가 앞에 있어야 함 뒤에 있으면 게시글 맨 아래에 추가됨\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = true;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n        break; //dummyPost가 앞에 있어야 함 뒤에 있으면 게시글 맨 아래에 추가됨\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n      case ADD_COMMENT_SUCCESS:\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n        post.Comments.unshift(dummyComment(action.data.content));\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n      //   //action.data.content, postId, userId 가 들어있겟지\r\n      //   //불변성의 핵심은 바뀌는것만 새로운 객체로 만들고 나머지느 ㄴ객체는 참조를 유지함\r\n      //   //그래야 바뀌는것만 바뀌고 안바뀌는거는 참조가 계속 유지되서 메모리를 절약 하는거임\r\n      //   const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n      //   const post = { ...state.mainPosts[postIndex] };\r\n      //   post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      //   const mainPosts = [...state.mainPosts];\r\n      //   mainPosts[postIndex] = post;\r\n      //   return {\r\n      //     ...state,\r\n      //     mainPosts,\r\n      //     addCommentLoading: false,\r\n      //     addCommentDone: true,\r\n      //   }; //dummyPost가 앞에 있어야 함 뒤에 있으면 게시글 맨 아래에 추가됨\r\n      // }\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\nexport default reducer;\r\n\r\n// const ADD_POST = \"ADD_POST\";\r\n// //이렇게 빼주면 좋은점이 밑에 ,case ADD_POST처럼 const값을 재활용 할수 있음\r\n// //그리고 변수 선언으로 인해 오타 방지\r\n// export const addPost = {\r\n//   type: ADD_POST,\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}