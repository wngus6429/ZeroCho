{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\wngus\\\\Documents\\\\GitHub\\\\ZeroCho\\\\nodebird\\\\prepare\\\\front\\\\pages\\\\post\\\\[id].js\";\nimport React from \"react\";\nimport { useRouter } from \"next/router\";\nimport { LOAD_MY_INFO_REQUEST } from \"../../reducers/user\";\nimport { LOAD_POST_REQUEST } from \"../../reducers/post\";\nimport wrapper from \"../../store/configureStore\";\nimport axios from \"axios\";\nimport { END } from \"redux-saga\";\nimport { Head } from \"next/head\";\nimport AppLayout from \"../../components/AppLayout\";\nimport PostCard from \"../../components/PostCard\";\nimport { useSelector } from \"react-redux\";\n\nconst Post = () => {\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const {\n    singlePost\n  } = useSelector(state => state.post);\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [/*#__PURE__*/_jsxDEV(\"title\", {\n      children: [singlePost.User.nickname, \"\\uB2D8\\uC758 \\uAE00\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n      name: \"description\",\n      content: singlePost.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n      property: \"og:title\",\n      content: `${singlePost.User.nickname}님의 게시글`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n      property: \"og:description\",\n      content: singlePost.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n      property: \"og:image\",\n      content: singlePost.Images[0] ? singlePost.Images[0].src : \"https://lcaohost:9000/favicon.png\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n      property: \"og:url\",\n      content: `https://lcaohost:9000/post/${id}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PostCard, {\n      post: singlePost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}; //og 이런게 카톡이나, 페북이런데 올리면, 미리보기 같은거임\n\n\nexport async function getStaticPaths() {\n  const result = await axios.get(\"/post/list\");\n  return {\n    paths: [{\n      params: {\n        id: \"1\"\n      }\n    }, {\n      params: {\n        id: \"2\"\n      }\n    }, {\n      params: {\n        id: \"3\"\n      }\n    }],\n    fallback: false //false는 위 params 에 적혀 있지 않으면 에러가 뜸\n\n  };\n} //getStaticPaths는 미리 그 페이지들을 빌드해서 html로 만드는데, 근데 다이나믹페이지,라우팅니까 뭘 미리 만들어야 할지 모름\n//그래서 미리 만들어주는거임 , 저렇게 id 등록을 해줘야 함. 근데 개인 블로그나 글 적어서 괜찮은데. SNS 수백수천수억은 답도 없지\n\nexport const getStaticProps = wrapper.getStaticProps(async context => {\n  console.log(\"getServerSideProps start\");\n  console.log(\"context\", context);\n  const cookie = context.req ? context.req.headers.cookie : \"\";\n  axios.defaults.headers.Cookie = \"\";\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POST_REQUEST,\n    data: context.params.id\n  });\n  context.store.dispatch(END); //next redux wrapper에 이렇게 하라고 적혀있음\n\n  console.log(\"getServerSideProps end\");\n  await context.store.sagaTask.toPromise(); //이거는 configurestore에. sagaTask등록한거\n}); //겟스타틱, 겟프롭스안에서는 context.params.id 또는 context.query.id하면 위에 userrouter에 똑같이 접근가능.\n\nexport default Post; //export const getServerSideProps = wrapper.getServerSideProps(async (context) => {","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/ZeroCho/nodebird/prepare/front/pages/post/[id].js"],"names":["React","useRouter","LOAD_MY_INFO_REQUEST","LOAD_POST_REQUEST","wrapper","axios","END","Head","AppLayout","PostCard","useSelector","Post","router","id","query","singlePost","state","post","User","nickname","content","Images","src","getStaticPaths","result","get","paths","params","fallback","getStaticProps","context","console","log","cookie","req","headers","defaults","Cookie","store","dispatch","type","data","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useRouter } from \"next/router\";\r\nimport { LOAD_MY_INFO_REQUEST } from \"../../reducers/user\";\r\nimport { LOAD_POST_REQUEST } from \"../../reducers/post\";\r\nimport wrapper from \"../../store/configureStore\";\r\nimport axios from \"axios\";\r\nimport { END } from \"redux-saga\";\r\nimport { Head } from \"next/head\";\r\nimport AppLayout from \"../../components/AppLayout\";\r\nimport PostCard from \"../../components/PostCard\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Post = () => {\r\n  const router = useRouter();\r\n  const { id } = router.query;\r\n  const { singlePost } = useSelector((state) => state.post);\r\n  return (\r\n    <AppLayout>\r\n      <title>{singlePost.User.nickname}님의 글</title>\r\n      <meta name=\"description\" content={singlePost.content} />\r\n      <meta property=\"og:title\" content={`${singlePost.User.nickname}님의 게시글`} />\r\n      <meta property=\"og:description\" content={singlePost.content} />\r\n      <meta\r\n        property=\"og:image\"\r\n        content={singlePost.Images[0] ? singlePost.Images[0].src : \"https://lcaohost:9000/favicon.png\"}\r\n      />\r\n      <meta property=\"og:url\" content={`https://lcaohost:9000/post/${id}`} />\r\n      <PostCard post={singlePost} />\r\n    </AppLayout>\r\n  );\r\n};\r\n//og 이런게 카톡이나, 페북이런데 올리면, 미리보기 같은거임\r\n\r\nexport async function getStaticPaths() {\r\n  const result = await axios.get(\"/post/list\");\r\n  return {\r\n    paths: [{ params: { id: \"1\" } }, { params: { id: \"2\" } }, { params: { id: \"3\" } }],\r\n    fallback: false, //false는 위 params 에 적혀 있지 않으면 에러가 뜸\r\n  };\r\n}\r\n//getStaticPaths는 미리 그 페이지들을 빌드해서 html로 만드는데, 근데 다이나믹페이지,라우팅니까 뭘 미리 만들어야 할지 모름\r\n//그래서 미리 만들어주는거임 , 저렇게 id 등록을 해줘야 함. 근데 개인 블로그나 글 적어서 괜찮은데. SNS 수백수천수억은 답도 없지\r\n\r\nexport const getStaticProps = wrapper.getStaticProps(async (context) => {\r\n  console.log(\"getServerSideProps start\");\r\n  console.log(\"context\", context);\r\n  const cookie = context.req ? context.req.headers.cookie : \"\";\r\n  axios.defaults.headers.Cookie = \"\";\r\n  if (context.req && cookie) {\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_POST_REQUEST,\r\n    data: context.params.id,\r\n  });\r\n  context.store.dispatch(END); //next redux wrapper에 이렇게 하라고 적혀있음\r\n  console.log(\"getServerSideProps end\");\r\n  await context.store.sagaTask.toPromise(); //이거는 configurestore에. sagaTask등록한거\r\n});\r\n\r\n//겟스타틱, 겟프롭스안에서는 context.params.id 또는 context.query.id하면 위에 userrouter에 똑같이 접근가능.\r\n\r\nexport default Post;\r\n\r\n//export const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n"]},"metadata":{},"sourceType":"module"}