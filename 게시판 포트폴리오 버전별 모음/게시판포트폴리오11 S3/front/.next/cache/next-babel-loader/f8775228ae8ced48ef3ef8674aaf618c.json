{"ast":null,"code":"import { all, fork, delay, put, takeLatest } from \"redux-saga/effects\"; //여기안에 delay, debounce, throttle, takeLastest, takeEvery, takeMaybe 같은것도 있음\n//지금 적은것들이 사가의 effect라 불림\n\nimport axios from \"axios\"; //이거는 컴바인 리듀스 같은게 필요 없음.\n//logInAPI이거는 generator안임. * 붙이면 안됨\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data); //로그인 요청 함\n} //항상 effect 앞에는 yield(일드)를 붙여준다\n//call, fork차이, fork는 비동기 함수 호출, call은 동기함수 호출\n//call을 하면 로그인 api가 리턴 할때까지 기다림. fork는 비동기라 요청보내버리고\n//결과 안 기다리고 바로 다음으로 감, call은 await이랑 비슷\n//그리고 데이터를 보낼때 logInAPI(action.data) 이렇게 해야하는데, call을 쓰면\n// 이걸 펼쳐줘야함 call(logInAPI, action.data); 밑에 처럼 이렇게\n//첫번쨰 자리가 함수고, 그 다음에 매개변수, 인수임 ,를 써서 더 주기 가능\n//굳이 yield를 안 붙여도되지만 붙이는 이유가 테스트 때문, 동작 보장이 되는가?\n\n\nfunction* logIn(action) {\n  try {\n    console.log(\"Saga User.js\"); //const result = yield call(logInAPI, action.data); //이렇게 결과값 요청후 받음\n\n    yield delay(1000); //서버 만들어 질때까지 delay로 비동기 효과 주기\n\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      //put은 dispatch라고 생각하면됨\n      data: action.data //성공 결과값\n\n    }); //중요한게 사가에서 자동으로 try,catch로 상황보고 석세스나\n    //failure보내기 때문에 개인이 따로 액션을 할 필요가 없다\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    }); //요청이 항상 성공하는건 아니니까, try, catch 쓰면됨\n  }\n} //애네들이 비동기 액션 크리에이터, thunk는 비동기 크리에이터를 직접 했지만\n//Saga는 이벤트 리스너 같은 역할, 비유 하자면\n//로그인 액션이 들어오면,로그인 제너레이터 함수를 실행 하도록, * 있는게 제너레이터 함수\n//take는 문제가 1회성임. 로그인하고 로그아웃하면 로그인 이벤트가 사라진다는 말\n//그래서 while을 사용하는거임. 이걸해야 진정한 이벤트 리스너 ㅋㅋ (원노트 참조)\n//근데 반복문 적는건 좀 보기 안 좋고 더 좋은 기능인 takeEvery를 사용\n//takeLatest 는 마지막에 클릭한거. (로딩 도중 기준) 여러번 클릭 방지, 첫번째꺼는 takeLeading\n\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\", data); //로그인 요청 함\n}\n\nfunction* logOut() {\n  try {\n    //const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\"\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n} //로그인이라는 action이 실행될떄까지 기다리겠다.\n\n\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/ZeroCho/nodebird/prepare/front/sagas/user.js"],"names":["all","fork","delay","put","takeLatest","axios","logInAPI","data","post","logIn","action","console","log","type","err","response","logOutAPI","logOut","watchLogIn","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD,C,CACA;AACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;AAEA;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP,CADsB,CACiB;AACxC,C,CAED;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACFC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EADE,CAEF;;AACA,UAAMV,KAAK,CAAC,IAAD,CAAX,CAHE,CAGiB;;AACnB,UAAMC,GAAG,CAAC;AACRU,MAAAA,IAAI,EAAE,gBADE;AACgB;AACxBN,MAAAA,IAAI,EAAEG,MAAM,CAACH,IAFL,CAEW;;AAFX,KAAD,CAAT,CAJE,CAOE;AACJ;AACD,GATD,CASE,OAAOO,GAAP,EAAY;AACZ,UAAMX,GAAG,CAAC;AACRU,MAAAA,IAAI,EAAE,gBADE;AAERN,MAAAA,IAAI,EAAEO,GAAG,CAACC,QAAJ,CAAaR;AAFX,KAAD,CAAT,CADY,CAIR;AACL;AACF,C,CACD;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA,SAASS,SAAT,GAAqB;AACnB,SAAOX,KAAK,CAACG,IAAN,CAAW,aAAX,EAA0BD,IAA1B,CAAP,CADmB,CACqB;AACzC;;AACD,UAAUU,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACRU,MAAAA,IAAI,EAAE;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAOC,GAAP,EAAY;AACZ,UAAMX,GAAG,CAAC;AACRU,MAAAA,IAAI,EAAE,iBADE;AAERN,MAAAA,IAAI,EAAEO,GAAG,CAACC,QAAJ,CAAaR;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUW,UAAV,GAAuB;AACrB,QAAMd,UAAU,CAAC,gBAAD,EAAmBK,KAAnB,CAAhB;AACD,C,CAAC;;;AAEF,UAAUU,WAAV,GAAwB;AACtB,QAAMf,UAAU,CAAC,iBAAD,EAAoBa,MAApB,CAAhB;AACD;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAMpB,GAAG,CAAC,CAACC,IAAI,CAACiB,UAAD,CAAL,EAAmBjB,IAAI,CAACkB,WAAD,CAAvB,CAAD,CAAT;AACD","sourcesContent":["import { all, fork, delay, put, takeLatest } from \"redux-saga/effects\";\r\n//여기안에 delay, debounce, throttle, takeLastest, takeEvery, takeMaybe 같은것도 있음\r\n//지금 적은것들이 사가의 effect라 불림\r\nimport axios from \"axios\";\r\n//이거는 컴바인 리듀스 같은게 필요 없음.\r\n\r\n//logInAPI이거는 generator안임. * 붙이면 안됨\r\nfunction logInAPI(data) {\r\n  return axios.post(\"/api/login\", data); //로그인 요청 함\r\n}\r\n\r\n//항상 effect 앞에는 yield(일드)를 붙여준다\r\n//call, fork차이, fork는 비동기 함수 호출, call은 동기함수 호출\r\n//call을 하면 로그인 api가 리턴 할때까지 기다림. fork는 비동기라 요청보내버리고\r\n//결과 안 기다리고 바로 다음으로 감, call은 await이랑 비슷\r\n\r\n//그리고 데이터를 보낼때 logInAPI(action.data) 이렇게 해야하는데, call을 쓰면\r\n// 이걸 펼쳐줘야함 call(logInAPI, action.data); 밑에 처럼 이렇게\r\n//첫번쨰 자리가 함수고, 그 다음에 매개변수, 인수임 ,를 써서 더 주기 가능\r\n//굳이 yield를 안 붙여도되지만 붙이는 이유가 테스트 때문, 동작 보장이 되는가?\r\nfunction* logIn(action) {\r\n  try {\r\n    console.log(\"Saga User.js\");\r\n    //const result = yield call(logInAPI, action.data); //이렇게 결과값 요청후 받음\r\n    yield delay(1000); //서버 만들어 질때까지 delay로 비동기 효과 주기\r\n    yield put({\r\n      type: \"LOG_IN_SUCCESS\", //put은 dispatch라고 생각하면됨\r\n      data: action.data, //성공 결과값\r\n    }); //중요한게 사가에서 자동으로 try,catch로 상황보고 석세스나\r\n    //failure보내기 때문에 개인이 따로 액션을 할 필요가 없다\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"LOG_IN_FAILURE\",\r\n      data: err.response.data,\r\n    }); //요청이 항상 성공하는건 아니니까, try, catch 쓰면됨\r\n  }\r\n}\r\n//애네들이 비동기 액션 크리에이터, thunk는 비동기 크리에이터를 직접 했지만\r\n//Saga는 이벤트 리스너 같은 역할, 비유 하자면\r\n//로그인 액션이 들어오면,로그인 제너레이터 함수를 실행 하도록, * 있는게 제너레이터 함수\r\n\r\n//take는 문제가 1회성임. 로그인하고 로그아웃하면 로그인 이벤트가 사라진다는 말\r\n//그래서 while을 사용하는거임. 이걸해야 진정한 이벤트 리스너 ㅋㅋ (원노트 참조)\r\n//근데 반복문 적는건 좀 보기 안 좋고 더 좋은 기능인 takeEvery를 사용\r\n//takeLatest 는 마지막에 클릭한거. (로딩 도중 기준) 여러번 클릭 방지, 첫번째꺼는 takeLeading\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/logout\", data); //로그인 요청 함\r\n}\r\nfunction* logOut() {\r\n  try {\r\n    //const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: \"LOG_OUT_SUCCESS\",\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"LOG_OUT_FAILURE\",\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\r\n} //로그인이라는 action이 실행될떄까지 기다리겠다.\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}