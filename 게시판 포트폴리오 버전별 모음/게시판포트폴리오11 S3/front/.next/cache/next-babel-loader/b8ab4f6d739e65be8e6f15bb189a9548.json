{"ast":null,"code":"import { all, fork, delay, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport shortId from \"shortid\";\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/api/posts\", data); //로그인 요청 함\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000); //가짜 로딩시간\n\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data); //로그인 요청 함\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      //게시글 작성하면 게시글에 대한 id와\n      data: id //유저 id를 연결 해야하니까\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data); //로그인 요청 함\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      //user Reducer 조작부분\n      type: REMOVE_POST_OF_ME,\n      //게시글 작성하면 게시글에 대한 id와\n      data: action.data //유저 id를 연결 해야하니까\n\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/${data.id}/comment\", data); //로그인 요청 함\n}\n\nfunction* addComment(action) {\n  try {\n    //const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n} // 하나라도 action이 적은게 좋다\n\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n} // function* watchAddPost() {\n//     yield throttle(\"LOG_POST_REQUEST\", addPost, 2000); //2초동안 리퀘스트 딱 1번만\n// }","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/ZeroCho/nodebird/prepare/front/sagas/post.js"],"names":["all","fork","delay","put","takeLatest","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortId","loadPostsAPI","data","get","loadPosts","action","type","err","console","error","response","addPostAPI","post","addPost","id","generate","content","removePostAPI","delete","removePost","addCommentAPI","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, delay, put, takeLatest } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  LOAD_POSTS_FAILURE,\r\n  generateDummyPost,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\nimport shortId from \"shortid\";\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get(\"/api/posts\", data); //로그인 요청 함\r\n}\r\nfunction* loadPosts(action) {\r\n  try {\r\n    // const result = yield call(loadPostsAPI, action.data);\r\n    yield delay(1000); //가짜 로딩시간\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: generateDummyPost(10),\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/post\", data); //로그인 요청 함\r\n}\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME, //게시글 작성하면 게시글에 대한 id와\r\n      data: id, //유저 id를 연결 해야하니까\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(\"/api/post\", data); //로그인 요청 함\r\n}\r\nfunction* removePost(action) {\r\n  try {\r\n    //const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      //user Reducer 조작부분\r\n      type: REMOVE_POST_OF_ME, //게시글 작성하면 게시글에 대한 id와\r\n      data: action.data, //유저 id를 연결 해야하니까\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(\"/api/post/${data.id}/comment\", data); //로그인 요청 함\r\n}\r\nfunction* addComment(action) {\r\n  try {\r\n    //const result = yield call(addCommentAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\n// 하나라도 action이 적은게 좋다\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\r\n}\r\n\r\n// function* watchAddPost() {\r\n//     yield throttle(\"LOG_POST_REQUEST\", addPost, 2000); //2초동안 리퀘스트 딱 1번만\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}