{"ast":null,"code":"import { all, fork, delay, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\nimport shortId from \"shortid\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data); //로그인 요청 함\n}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      //게시글 작성하면 게시글에 대한 id와\n      data: id //유저 id를 연결 해야하니까\n\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data); //로그인 요청 함\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      //user Reducer 조작부분\n      type: REMOVE_POST_OF_ME,\n      //게시글 작성하면 게시글에 대한 id와\n      data: id //유저 id를 연결 해야하니까\n\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/${data.id}/comment\", data); //로그인 요청 함\n}\n\nfunction* addComment(action) {\n  try {\n    //const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n} // 하나라도 action이 적은게 좋다\n\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n} // function* watchAddPost() {\n//     yield throttle(\"LOG_POST_REQUEST\", addPost, 2000); //2초동안 리퀘스트 딱 1번만\n// }","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/ZeroCho/nodebird/prepare/front/sagas/post.js"],"names":["all","fork","delay","put","takeLatest","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","shortId","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","removePostAPI","delete","removePost","REMOVE_POST_OF_ME","addCommentAPI","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, delay, put, takeLatest } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\r\nimport shortId from \"shortid\";\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/post\", data); //로그인 요청 함\r\n}\r\nfunction* addPost(action) {\r\n  try {\r\n    //const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: { id, content: action.data },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME, //게시글 작성하면 게시글에 대한 id와\r\n      data: id, //유저 id를 연결 해야하니까\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(\"/api/post\", data); //로그인 요청 함\r\n}\r\nfunction* removePost(action) {\r\n  try {\r\n    //const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: { id, content: action.data },\r\n    });\r\n    yield put({\r\n      //user Reducer 조작부분\r\n      type: REMOVE_POST_OF_ME, //게시글 작성하면 게시글에 대한 id와\r\n      data: id, //유저 id를 연결 해야하니까\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(\"/api/post/${data.id}/comment\", data); //로그인 요청 함\r\n}\r\nfunction* addComment(action) {\r\n  try {\r\n    //const result = yield call(addCommentAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// 하나라도 action이 적은게 좋다\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\r\n}\r\n\r\n// function* watchAddPost() {\r\n//     yield throttle(\"LOG_POST_REQUEST\", addPost, 2000); //2초동안 리퀘스트 딱 1번만\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}