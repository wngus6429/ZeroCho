{"ast":null,"code":"import { all, fork, delay, put, takeLatest, call } from \"redux-saga/effects\"; //여기안에 delay, debounce, throttle, takeLastest, takeEvery, takeMaybe 같은것도 있음\n//지금 적은것들이 사가의 effect라 불림\n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FOLLOW_REQUEST, UNFOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE } from \"../reducers/user\";\nimport axios from \"axios\"; //이거는 컴바인 리듀스 같은게 필요 없음.\n//logInAPI이거는 generator안임. * 붙이면 안됨\n\nfunction logInAPI(data) {\n  return axios.post(\"/user/login\", data); //로그인 요청 함\n} //항상 effect 앞에는 yield(일드)를 붙여준다\n//call, fork차이, fork는 비동기 함수 호출, call은 동기함수 호출\n//call을 하면 로그인 api가 리턴 할때까지 기다림. fork는 비동기라 요청보내버리고\n//결과 안 기다리고 바로 다음으로 감, call은 await이랑 비슷\n//그리고 데이터를 보낼때 logInAPI(action.data) 이렇게 해야하는데, call을 쓰면\n// 이걸 펼쳐줘야함 call(logInAPI, action.data); 밑에 처럼 이렇게\n//첫번쨰 자리가 함수고, 그 다음에 매개변수, 인수임 ,를 써서 더 주기 가능\n//굳이 yield를 안 붙여도되지만 붙이는 이유가 테스트 때문, 동작 보장이 되는가?\n\n\nfunction* logIn(action) {\n  try {\n    console.log(\"Saga User.js\");\n    const result = yield call(logInAPI, action.data); //이렇게 결과값 요청후 받음\n    // yield delay(1000); //서버 만들어 질때까지 delay로 비동기 효과 주기\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      //put은 dispatch라고 생각하면됨\n      data: result.data //성공 결과값, 성공후 reducer user.js switch로\n\n    }); //중요한게 사가에서 자동으로 try,catch로 상황보고 석세스나\n    //failure보내기 때문에 개인이 따로 액션을 할 필요가 없다\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    }); //요청이 항상 성공하는건 아니니까, try, catch 쓰면됨\n  }\n} //애네들이 비동기 액션 크리에이터, thunk는 비동기 크리에이터를 직접 했지만\n//Saga는 이벤트 리스너 같은 역할, 비유 하자면\n//로그인 액션이 들어오면,로그인 제너레이터 함수를 실행 하도록, * 있는게 제너레이터 함수\n//take는 문제가 1회성임. 로그인하고 로그아웃하면 로그인 이벤트가 사라진다는 말\n//그래서 while을 사용하는거임. 이걸해야 진정한 이벤트 리스너 ㅋㅋ (원노트 참조)\n//근데 반복문 적는건 좀 보기 안 좋고 더 좋은 기능인 takeEvery를 사용\n//takeLatest 는 마지막에 클릭한거. (로딩 도중 기준) 여러번 클릭 방지, 첫번째꺼는 takeLeading\n\n\nfunction logOutAPI() {\n  return axios.post(\"/user/logout\"); //로그인 요청 함\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post(\"/user\", data); //로그인 요청 함\n} //data안에 Email, Password, NickName 가 들어있다. signup.js 참조\n//get이랑 delete요청은 데이터를 못 보내지만, post,put,patch는 넘길수 있다. 두번째로\n\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data); //yield delay(1000); //throw new Error(\"\")를 하게 되면 바로 밑에 catch로 간다\n\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction followAPI() {\n  return axios.post(\"/api/logout\", data); //로그인 요청 함\n}\n\nfunction* follow(action) {\n  try {\n    //const result = yield call(followAPI);\n    yield delay(1000); //throw new Error(\"\")를 하게 되면 바로 밑에 catch로 간다\n\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unfollowAPI() {\n  return axios.post(\"/api/logout\", data); //로그인 요청 함\n}\n\nfunction* unfollow(action) {\n  try {\n    //const result = yield call(unfollowAPI);\n    yield delay(1000); //throw new Error(\"\")를 하게 되면 바로 밑에 catch로 간다\n\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n} //로그인이라는 action이 실행될떄까지 기다리겠다.\n\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n} //이벤트 리스너를 만드는거임\n\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n} //로그인이라는 action이 실행될떄까지 기다리겠다.\n\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/ZeroCho/nodebird/prepare/front/sagas/user.js"],"names":["all","fork","delay","put","takeLatest","call","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","FOLLOW_REQUEST","UNFOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","axios","logInAPI","data","post","logIn","action","console","log","result","type","err","error","response","logOutAPI","logOut","signUpAPI","signUp","followAPI","follow","unfollowAPI","unfollow","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, delay, put, takeLatest, call } from \"redux-saga/effects\";\r\n//여기안에 delay, debounce, throttle, takeLastest, takeEvery, takeMaybe 같은것도 있음\r\n//지금 적은것들이 사가의 effect라 불림\r\nimport {\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  FOLLOW_REQUEST,\r\n  UNFOLLOW_REQUEST,\r\n  FOLLOW_SUCCESS,\r\n  FOLLOW_FAILURE,\r\n  UNFOLLOW_SUCCESS,\r\n  UNFOLLOW_FAILURE,\r\n} from \"../reducers/user\";\r\nimport axios from \"axios\";\r\n//이거는 컴바인 리듀스 같은게 필요 없음.\r\n\r\n//logInAPI이거는 generator안임. * 붙이면 안됨\r\nfunction logInAPI(data) {\r\n  return axios.post(\"/user/login\", data); //로그인 요청 함\r\n}\r\n\r\n//항상 effect 앞에는 yield(일드)를 붙여준다\r\n//call, fork차이, fork는 비동기 함수 호출, call은 동기함수 호출\r\n//call을 하면 로그인 api가 리턴 할때까지 기다림. fork는 비동기라 요청보내버리고\r\n//결과 안 기다리고 바로 다음으로 감, call은 await이랑 비슷\r\n\r\n//그리고 데이터를 보낼때 logInAPI(action.data) 이렇게 해야하는데, call을 쓰면\r\n// 이걸 펼쳐줘야함 call(logInAPI, action.data); 밑에 처럼 이렇게\r\n//첫번쨰 자리가 함수고, 그 다음에 매개변수, 인수임 ,를 써서 더 주기 가능\r\n//굳이 yield를 안 붙여도되지만 붙이는 이유가 테스트 때문, 동작 보장이 되는가?\r\nfunction* logIn(action) {\r\n  try {\r\n    console.log(\"Saga User.js\");\r\n    const result = yield call(logInAPI, action.data); //이렇게 결과값 요청후 받음\r\n    // yield delay(1000); //서버 만들어 질때까지 delay로 비동기 효과 주기\r\n    yield put({\r\n      type: LOG_IN_SUCCESS, //put은 dispatch라고 생각하면됨\r\n      data: result.data, //성공 결과값, 성공후 reducer user.js switch로\r\n    }); //중요한게 사가에서 자동으로 try,catch로 상황보고 석세스나\r\n    //failure보내기 때문에 개인이 따로 액션을 할 필요가 없다\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    }); //요청이 항상 성공하는건 아니니까, try, catch 쓰면됨\r\n  }\r\n}\r\n//애네들이 비동기 액션 크리에이터, thunk는 비동기 크리에이터를 직접 했지만\r\n//Saga는 이벤트 리스너 같은 역할, 비유 하자면\r\n//로그인 액션이 들어오면,로그인 제너레이터 함수를 실행 하도록, * 있는게 제너레이터 함수\r\n\r\n//take는 문제가 1회성임. 로그인하고 로그아웃하면 로그인 이벤트가 사라진다는 말\r\n//그래서 while을 사용하는거임. 이걸해야 진정한 이벤트 리스너 ㅋㅋ (원노트 참조)\r\n//근데 반복문 적는건 좀 보기 안 좋고 더 좋은 기능인 takeEvery를 사용\r\n//takeLatest 는 마지막에 클릭한거. (로딩 도중 기준) 여러번 클릭 방지, 첫번째꺼는 takeLeading\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/user/logout\"); //로그인 요청 함\r\n}\r\nfunction* logOut() {\r\n  try {\r\n    yield call(logOutAPI);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n  return axios.post(\"/user\", data); //로그인 요청 함\r\n} //data안에 Email, Password, NickName 가 들어있다. signup.js 참조\r\n//get이랑 delete요청은 데이터를 못 보내지만, post,put,patch는 넘길수 있다. 두번째로\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    const result = yield call(signUpAPI, action.data);\r\n    //yield delay(1000); //throw new Error(\"\")를 하게 되면 바로 밑에 catch로 간다\r\n    console.log(result);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction followAPI() {\r\n  return axios.post(\"/api/logout\", data); //로그인 요청 함\r\n}\r\nfunction* follow(action) {\r\n  try {\r\n    //const result = yield call(followAPI);\r\n    yield delay(1000); //throw new Error(\"\")를 하게 되면 바로 밑에 catch로 간다\r\n    yield put({\r\n      type: FOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: FOLLOW_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unfollowAPI() {\r\n  return axios.post(\"/api/logout\", data); //로그인 요청 함\r\n}\r\nfunction* unfollow(action) {\r\n  try {\r\n    //const result = yield call(unfollowAPI);\r\n    yield delay(1000); //throw new Error(\"\")를 하게 되면 바로 밑에 catch로 간다\r\n    yield put({\r\n      type: UNFOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UNFOLLOW_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchFollow() {\r\n  yield takeLatest(FOLLOW_REQUEST, follow);\r\n} //로그인이라는 action이 실행될떄까지 기다리겠다.\r\n\r\nfunction* watchUnfollow() {\r\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n\r\n//이벤트 리스너를 만드는거임\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n} //로그인이라는 action이 실행될떄까지 기다리겠다.\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}