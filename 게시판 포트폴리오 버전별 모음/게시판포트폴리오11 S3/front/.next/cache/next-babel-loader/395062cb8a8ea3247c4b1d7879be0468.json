{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\wngus\\\\Documents\\\\GitHub\\\\ZeroCho\\\\nodebird\\\\prepare\\\\front\\\\pages\\\\index.js\";\nimport React, { useEffect } from \"react\"; //next는 이거 없어도됨\n\nimport AppLayout from \"../components/AppLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport PostCard from \"../components/PostCard\";\nimport PostForm from \"../components/PostForm\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport { LOAD_USER_REQUEST } from \"../reducers/user\";\nimport wrapper from \"../store/configureStore\"; //next는 pages라는 폴더를 인식한다 그래서 그 파일을 개별적인 페이지 컴포넌트로 만들어짐\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading,\n    retweetError\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]); //메인 페이지가 나올때 바로 useEffect도 되겠지\n  //Componentsdidmount 효과, 빈배열뒤에 넣으면\n\n  useEffect(() => {\n    function onScroll() {\n      // console.log(\n      //   window.scrollY, //얼마나 내렸는지 위치,\n      //   document.documentElement.clientHeight, //화면에서 보이는 길이\n      //   document.documentElement.scrollHeight //총 길이, 맨 밑에 내렸을때 위 두개 더한게 이거\n      // );\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          //이미 다 불러왔거나, 아니면 불러오는 중이면 더 이상 LOADPOSTREQUEST를 하지 못하게\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id; //마지막 게시글의 ID /게시글이0일때를 고려해서 ?넣어줌\n\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener(\"scroll\", onScroll);\n    return () => {\n      //윈도우에서 addEvent 하면 주의해야할게 리턴을 꼭 해줘야함\n      //스크롤 했던거 해제 해야함. 아니면 메모리에 쌓임\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading]);\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 14\n    }, this), mainPosts.map(post => /*#__PURE__*/_jsxDEV(PostCard, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}; //서버사이드 랜더링 이부분이 알아서 home보다 먼저 실행됨. 그래야 데이터 먼저 채우고 화면이 렌더링\n//매개변수 context\n\n\nexport const getServerSideProps = wrapper.getServerSideProps(context => {\n  console.log(context);\n  context.store.dispatch({\n    type: LOAD_USER_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  });\n  context.store.dispatch(END);\n});\nexport default Home; //위에 index를 key로 하면 안됨. 특히 게시글이 지워질 가능성이 있는경우에는 특히\n//순서가 달라지거나 중간에 뭐가 추가될때 key를 index로 쓰면안됨.\n//바뀌지 않는거다. 반복문이 있고 그 데이터가 바뀌지 않을때는 key를 index로 쓸수 있음.\n//post안에 id를 사용","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/ZeroCho/nodebird/prepare/front/pages/index.js"],"names":["React","useEffect","AppLayout","useDispatch","useSelector","PostCard","PostForm","LOAD_POSTS_REQUEST","LOAD_USER_REQUEST","wrapper","Home","dispatch","me","state","user","mainPosts","hasMorePosts","loadPostsLoading","retweetError","post","alert","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","type","addEventListener","removeEventListener","map","getServerSideProps","context","console","log","store","END"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAA0C;;AAC1C,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,OAAOC,OAAP,MAAoB,yBAApB,C,CAEA;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAM;AAAES,IAAAA;AAAF,MAASR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAA1B;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,gBAA3B;AAA6CC,IAAAA;AAA7C,MAA8Dd,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACM,IAAlB,CAA/E;AAEAlB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,YAAJ,EAAkB;AAChBE,MAAAA,KAAK,CAACF,YAAD,CAAL;AACD;AACF,GAJQ,EAIN,CAACA,YAAD,CAJM,CAAT,CALiB,CAWjB;AACA;;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACd,aAASoB,QAAT,GAAoB;AAClB;AACA;AACA;AACA;AACA;AACA,UACEC,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GACAF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAF1C,EAGE;AACA,YAAIX,YAAY,IAAI,CAACC,gBAArB,EAAuC;AAAA;;AACrC;AACA,gBAAMW,MAAM,iBAAGb,SAAS,CAACA,SAAS,CAACc,MAAV,GAAmB,CAApB,CAAZ,+CAAG,WAAiCC,EAAhD,CAFqC,CAEe;;AACpDnB,UAAAA,QAAQ,CAAC;AACPoB,YAAAA,IAAI,EAAExB,kBADC;AAEPqB,YAAAA;AAFO,WAAD,CAAR;AAID;AACF;AACF;;AACDN,IAAAA,MAAM,CAACU,gBAAP,CAAwB,QAAxB,EAAkCX,QAAlC;AACA,WAAO,MAAM;AACX;AACA;AACAC,MAAAA,MAAM,CAACW,mBAAP,CAA2B,QAA3B,EAAqCZ,QAArC;AACD,KAJD;AAKD,GA3BQ,EA2BN,CAACL,YAAD,EAAeC,gBAAf,CA3BM,CAAT;AA6BA,sBACE,QAAC,SAAD;AAAA,eACGL,EAAE,iBAAI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YADT,EAEGG,SAAS,CAACmB,GAAV,CAAef,IAAD,iBACb,QAAC,QAAD;AAAwB,MAAA,IAAI,EAAEA;AAA9B,OAAeA,IAAI,CAACW,EAApB;AAAA;AAAA;AAAA;AAAA,YADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAnDD,C,CAqDA;AACA;;;AACA,OAAO,MAAMK,kBAAkB,GAAG1B,OAAO,CAAC0B,kBAAR,CAA4BC,OAAD,IAAa;AACxEC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAA,EAAAA,OAAO,CAACG,KAAR,CAAc5B,QAAd,CAAuB;AACrBoB,IAAAA,IAAI,EAAEvB;AADe,GAAvB;AAGA4B,EAAAA,OAAO,CAACG,KAAR,CAAc5B,QAAd,CAAuB;AACrBoB,IAAAA,IAAI,EAAExB;AADe,GAAvB;AAGA6B,EAAAA,OAAO,CAACG,KAAR,CAAc5B,QAAd,CAAuB6B,GAAvB;AACD,CATiC,CAA3B;AAWP,eAAe9B,IAAf,C,CAEA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect } from \"react\"; //next는 이거 없어도됨\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PostCard from \"../components/PostCard\";\r\nimport PostForm from \"../components/PostForm\";\r\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\r\nimport { LOAD_USER_REQUEST } from \"../reducers/user\";\r\nimport wrapper from \"../store/configureStore\";\r\n\r\n//next는 pages라는 폴더를 인식한다 그래서 그 파일을 개별적인 페이지 컴포넌트로 만들어짐\r\n\r\nconst Home = () => {\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts, hasMorePosts, loadPostsLoading, retweetError } = useSelector((state) => state.post);\r\n\r\n  useEffect(() => {\r\n    if (retweetError) {\r\n      alert(retweetError);\r\n    }\r\n  }, [retweetError]);\r\n\r\n  //메인 페이지가 나올때 바로 useEffect도 되겠지\r\n  //Componentsdidmount 효과, 빈배열뒤에 넣으면\r\n\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      // console.log(\r\n      //   window.scrollY, //얼마나 내렸는지 위치,\r\n      //   document.documentElement.clientHeight, //화면에서 보이는 길이\r\n      //   document.documentElement.scrollHeight //총 길이, 맨 밑에 내렸을때 위 두개 더한게 이거\r\n      // );\r\n      if (\r\n        window.scrollY + document.documentElement.clientHeight >\r\n        document.documentElement.scrollHeight - 300\r\n      ) {\r\n        if (hasMorePosts && !loadPostsLoading) {\r\n          //이미 다 불러왔거나, 아니면 불러오는 중이면 더 이상 LOADPOSTREQUEST를 하지 못하게\r\n          const lastId = mainPosts[mainPosts.length - 1]?.id; //마지막 게시글의 ID /게시글이0일때를 고려해서 ?넣어줌\r\n          dispatch({\r\n            type: LOAD_POSTS_REQUEST,\r\n            lastId,\r\n          });\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener(\"scroll\", onScroll);\r\n    return () => {\r\n      //윈도우에서 addEvent 하면 주의해야할게 리턴을 꼭 해줘야함\r\n      //스크롤 했던거 해제 해야함. 아니면 메모리에 쌓임\r\n      window.removeEventListener(\"scroll\", onScroll);\r\n    };\r\n  }, [hasMorePosts, loadPostsLoading]);\r\n\r\n  return (\r\n    <AppLayout>\r\n      {me && <PostForm />}\r\n      {mainPosts.map((post) => (\r\n        <PostCard key={post.id} post={post} />\r\n      ))}\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\n//서버사이드 랜더링 이부분이 알아서 home보다 먼저 실행됨. 그래야 데이터 먼저 채우고 화면이 렌더링\r\n//매개변수 context\r\nexport const getServerSideProps = wrapper.getServerSideProps((context) => {\r\n  console.log(context);\r\n  context.store.dispatch({\r\n    type: LOAD_USER_REQUEST,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_POSTS_REQUEST,\r\n  });\r\n  context.store.dispatch(END);\r\n});\r\n\r\nexport default Home;\r\n\r\n//위에 index를 key로 하면 안됨. 특히 게시글이 지워질 가능성이 있는경우에는 특히\r\n//순서가 달라지거나 중간에 뭐가 추가될때 key를 index로 쓰면안됨.\r\n//바뀌지 않는거다. 반복문이 있고 그 데이터가 바뀌지 않을때는 key를 index로 쓸수 있음.\r\n//post안에 id를 사용\r\n"]},"metadata":{},"sourceType":"module"}