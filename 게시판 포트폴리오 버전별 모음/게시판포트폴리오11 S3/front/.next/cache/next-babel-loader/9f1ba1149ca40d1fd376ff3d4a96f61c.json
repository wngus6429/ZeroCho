{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport AppLayout from \"../components/AppLayout\";\nimport { Form, Input, Checkbox, Button } from \"antd\";\nimport Head from \"next/head\";\nimport styled from \"styled-components\";\nimport useinput from \"../hooks/useinput\";\nimport { SIGN_UP_REQUEST, LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport router from \"next/router\";\nimport { END } from \"redux-saga\";\nimport axios from \"axios\";\nimport wrapper from \"../store/configureStore\";\nconst ErrorMessage = styled.div.withConfig({\n  displayName: \"signup__ErrorMessage\",\n  componentId: \"sc-1oeks01-0\"\n})([\"color:red;\"]);\n\nconst Signup = () => {\n  const dispatch = useDispatch();\n  const {\n    signUpLoading,\n    signUpDone,\n    signUpError,\n    me\n  } = useSelector(state => state.user);\n  useEffect(() => {\n    if (me && me.id) {\n      router.replace(\"/\");\n    }\n  }, [me && me.id]);\n  useEffect(() => {\n    if (signUpDone) {\n      router.replace(\"/\"); //완료되면 메인페이지로\n    }\n  }, [signUpDone]);\n  useEffect(() => {\n    if (signUpError) {\n      alert(signUpError);\n    }\n  }, [signUpError]);\n  const [email, onChangeEmail] = useinput(\"\");\n  const [nickname, onChangeNickName] = useinput(\"\");\n  const [password, onChangePassword] = useinput(\"\");\n  const {\n    0: passwordError,\n    1: setPasswordError\n  } = useState(false); //비밀번호가 일치 하지 않으면 첫번쨰 true가 됨\n\n  const {\n    0: passwordCheck,\n    1: setPasswordCheck\n  } = useState(\"\");\n  const onChangePasswordCheck = useCallback(e => {\n    setPasswordCheck(e.target.value);\n    setPasswordError(e.target.value !== password);\n  }, [password]);\n  const {\n    0: term,\n    1: setTerm\n  } = useState(\"\");\n  const {\n    0: TermError,\n    1: setTermError\n  } = useState(false);\n  const onChangeTerm = useCallback(e => {\n    setTerm(e.target.checked);\n    setTermError(false);\n  }, []);\n  const onsubmit = useCallback(() => {\n    if (password !== passwordCheck) {\n      return setPasswordError(true);\n    }\n\n    if (!term) {\n      return setTermError(true);\n    }\n\n    console.log(email, nickname, password);\n    dispatch({\n      type: SIGN_UP_REQUEST,\n      data: {\n        email,\n        password,\n        nickname\n      }\n    });\n  }, [email, password, passwordCheck, term]);\n  return /*#__PURE__*/_jsxs(AppLayout, {\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsx(\"title\", {\n        children: \"\\u4F1A\\u54E1\\u767B\\u9332\"\n      })\n    }), /*#__PURE__*/_jsxs(Form, {\n      onFinish: onsubmit,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsx(\"label\", {\n          htmlFor: \"user-email\",\n          children: \"\\u30E1\\u30FC\\u30EB\"\n        }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(Input, {\n          name: \"user-email\",\n          type: \"email\",\n          value: email,\n          onChange: onChangeEmail,\n          required: true\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsx(\"label\", {\n          htmlFor: \"user-id\",\n          children: \"\\u30CB\\u30C3\\u30AF\\u30CD\\u30FC\\u30E0\"\n        }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(Input, {\n          name: \"user-id\",\n          value: nickname,\n          onChange: onChangeNickName,\n          required: true\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsx(\"label\", {\n          htmlFor: \"user-password\",\n          children: \"\\u6697\\u8A3C\\u756A\\u53F7\"\n        }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(Input, {\n          name: \"user-password\",\n          type: \"password\",\n          value: password,\n          onChange: onChangePassword,\n          required: true\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsx(\"label\", {\n          htmlFor: \"user-password\",\n          children: \"\\u6697\\u8A3C\\u756A\\u53F7 \\u30C1\\u30A7\\u30C3\\u30AF\"\n        }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(Input, {\n          name: \"user-password-check\",\n          type: \"password\",\n          value: passwordCheck,\n          onChange: onChangePasswordCheck,\n          required: true\n        }), passwordError && /*#__PURE__*/_jsx(ErrorMessage, {\n          children: \"\\u6697\\u8A3C\\u756A\\u53F7\\u304C\\u4E00\\u81F4\\u3057\\u3066\\u3044\\u307E\\u305B\\u3093\\u3002\"\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsx(Checkbox, {\n          name: \"user-term\",\n          checked: term,\n          onChange: onChangeTerm,\n          children: \"\\u7BA1\\u7406\\u8005\\u306E\\u8A71\\u3092\\u3088\\u304F\\u805E\\u3044\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\"\n        }), TermError && /*#__PURE__*/_jsx(ErrorMessage, {\n          children: \"\\u540C\\u610F\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        style: {\n          marginTop: 10\n        },\n        children: /*#__PURE__*/_jsx(Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          loading: signUpLoading,\n          children: \"\\u767B\\u9332\"\n        })\n      })]\n    })]\n  });\n}; //서버사이드 랜더링 이부분이 알아서 home보다 먼저 실행됨. 그래야 데이터 먼저 채우고 화면이 렌더링\n//매개변수 context , 여긴 프론트서버에서 실행되는거임\n\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log(\"getServerSideProps start\");\n  console.log(\"context\", context); //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  const cookie = context.req ? context.req.headers.cookie : \"\"; //이걸 해야 서버쪽으로 쿠키가 전달이됨\n\n  axios.defaults.headers.Cookie = \"\"; //이걸 해야 서버쪽으로 쿠키가 전달이됨\n\n  if (context.req && cookie) {\n    //서버일때랑 쿠키가 있을때 , 이런게 아니면 위에 \"\" //이렇게 안하면 서버에서 쿠키가 공유되서 다른사람이 내 아이디로 로그인되는\n    axios.defaults.headers.Cookie = cookie;\n  } //저희가 실제로 쿠키를 써서 요청을 보낼때만 잠깐 쿠키를 넣어놧다가 쿠키를 안써서 요청보낼때는 서버에서 공유하고 있는 쿠키를 제거하는 이부분이 제일 중요\n  ////////////////////////////////////////////////////////////////////////////////////////\n\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch(END); //next redux wrapper에 이렇게 하라고 적혀있음\n\n  await context.store.sagaTask.toPromise(); //이거는 configurestore에. sagaTask등록한거\n}); //서버사이드랜더링이 request가 success될떄까지 기다려주는거\n\nexport default Signup; //TermError는 제출할때 true가 됨\n//Button type=\"primary\"\n//htmlType=\"submit\" 할시 위에 onFinish가 호출됨. e.preventDefault() 내장 되어 있어서 안해도됨","map":{"version":3,"sources":["C:/Users/wngus/Documents/GitHub/portfolio-japanese/prepare/front/pages/signup.js"],"names":["React","useCallback","useEffect","useState","AppLayout","Form","Input","Checkbox","Button","Head","styled","useinput","SIGN_UP_REQUEST","LOAD_MY_INFO_REQUEST","useDispatch","useSelector","router","END","axios","wrapper","ErrorMessage","div","Signup","dispatch","signUpLoading","signUpDone","signUpError","me","state","user","id","replace","alert","email","onChangeEmail","nickname","onChangeNickName","password","onChangePassword","passwordError","setPasswordError","passwordCheck","setPasswordCheck","onChangePasswordCheck","e","target","value","term","setTerm","TermError","setTermError","onChangeTerm","checked","onsubmit","console","log","type","data","marginTop","getServerSideProps","context","cookie","req","headers","defaults","Cookie","store","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport { Form, Input, Checkbox, Button } from \"antd\";\r\nimport Head from \"next/head\";\r\nimport styled from \"styled-components\";\r\nimport useinput from \"../hooks/useinput\";\r\nimport { SIGN_UP_REQUEST, LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport router from \"next/router\";\r\nimport { END } from \"redux-saga\";\r\nimport axios from \"axios\";\r\nimport wrapper from \"../store/configureStore\";\r\n\r\nconst ErrorMessage = styled.div`\r\n  color: red;\r\n`;\r\n\r\nconst Signup = () => {\r\n  const dispatch = useDispatch();\r\n  const { signUpLoading, signUpDone, signUpError, me } = useSelector((state) => state.user);\r\n\r\n  useEffect(() => {\r\n    if (me && me.id) {\r\n      router.replace(\"/\");\r\n    }\r\n  }, [me && me.id]);\r\n\r\n  useEffect(() => {\r\n    if (signUpDone) {\r\n      router.replace(\"/\"); //완료되면 메인페이지로\r\n    }\r\n  }, [signUpDone]);\r\n\r\n  useEffect(() => {\r\n    if (signUpError) {\r\n      alert(signUpError);\r\n    }\r\n  }, [signUpError]);\r\n\r\n  const [email, onChangeEmail] = useinput(\"\");\r\n  const [nickname, onChangeNickName] = useinput(\"\");\r\n  const [password, onChangePassword] = useinput(\"\");\r\n  const [passwordError, setPasswordError] = useState(false); //비밀번호가 일치 하지 않으면 첫번쨰 true가 됨\r\n  const [passwordCheck, setPasswordCheck] = useState(\"\");\r\n  const onChangePasswordCheck = useCallback(\r\n    (e) => {\r\n      setPasswordCheck(e.target.value);\r\n      setPasswordError(e.target.value !== password);\r\n    },\r\n    [password]\r\n  );\r\n  const [term, setTerm] = useState(\"\");\r\n  const [TermError, setTermError] = useState(false);\r\n  const onChangeTerm = useCallback((e) => {\r\n    setTerm(e.target.checked);\r\n    setTermError(false);\r\n  }, []);\r\n\r\n  const onsubmit = useCallback(() => {\r\n    if (password !== passwordCheck) {\r\n      return setPasswordError(true);\r\n    }\r\n    if (!term) {\r\n      return setTermError(true);\r\n    }\r\n    console.log(email, nickname, password);\r\n    dispatch({\r\n      type: SIGN_UP_REQUEST,\r\n      data: { email, password, nickname },\r\n    });\r\n  }, [email, password, passwordCheck, term]);\r\n  return (\r\n    <AppLayout>\r\n      <Head>\r\n        <title>会員登録</title>\r\n      </Head>\r\n      <Form onFinish={onsubmit}>\r\n        <div>\r\n          <label htmlFor=\"user-email\">メール</label>\r\n          <br />\r\n          <Input name=\"user-email\" type=\"email\" value={email} onChange={onChangeEmail} required />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"user-id\">ニックネーム</label>\r\n          <br />\r\n          <Input name=\"user-id\" value={nickname} onChange={onChangeNickName} required />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"user-password\">暗証番号</label>\r\n          <br />\r\n          <Input name=\"user-password\" type=\"password\" value={password} onChange={onChangePassword} required />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"user-password\">暗証番号 チェック</label>\r\n          <br />\r\n          <Input\r\n            name=\"user-password-check\"\r\n            type=\"password\"\r\n            value={passwordCheck}\r\n            onChange={onChangePasswordCheck}\r\n            required\r\n          />\r\n          {passwordError && <ErrorMessage>暗証番号が一致していません。</ErrorMessage>}\r\n        </div>\r\n        <div>\r\n          <Checkbox name=\"user-term\" checked={term} onChange={onChangeTerm}>\r\n            管理者の話をよく聞いてください。\r\n          </Checkbox>\r\n          {TermError && <ErrorMessage>同意してください</ErrorMessage>}\r\n        </div>\r\n        <div style={{ marginTop: 10 }}>\r\n          <Button type=\"primary\" htmlType=\"submit\" loading={signUpLoading}>\r\n            登録\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\n//서버사이드 랜더링 이부분이 알아서 home보다 먼저 실행됨. 그래야 데이터 먼저 채우고 화면이 렌더링\r\n//매개변수 context , 여긴 프론트서버에서 실행되는거임\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  console.log(\"getServerSideProps start\");\r\n  console.log(\"context\", context);\r\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const cookie = context.req ? context.req.headers.cookie : \"\"; //이걸 해야 서버쪽으로 쿠키가 전달이됨\r\n  axios.defaults.headers.Cookie = \"\"; //이걸 해야 서버쪽으로 쿠키가 전달이됨\r\n  if (context.req && cookie) {\r\n    //서버일때랑 쿠키가 있을때 , 이런게 아니면 위에 \"\" //이렇게 안하면 서버에서 쿠키가 공유되서 다른사람이 내 아이디로 로그인되는\r\n    axios.defaults.headers.Cookie = cookie;\r\n  } //저희가 실제로 쿠키를 써서 요청을 보낼때만 잠깐 쿠키를 넣어놧다가 쿠키를 안써서 요청보낼때는 서버에서 공유하고 있는 쿠키를 제거하는 이부분이 제일 중요\r\n  ////////////////////////////////////////////////////////////////////////////////////////\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch(END); //next redux wrapper에 이렇게 하라고 적혀있음\r\n  await context.store.sagaTask.toPromise(); //이거는 configurestore에. sagaTask등록한거\r\n}); //서버사이드랜더링이 request가 success될떄까지 기다려주는거\r\n\r\nexport default Signup;\r\n\r\n//TermError는 제출할때 true가 됨\r\n//Button type=\"primary\"\r\n//htmlType=\"submit\" 할시 위에 onFinish가 호출됨. e.preventDefault() 내장 되어 있어서 안해도됨\r\n"]},"metadata":{},"sourceType":"module"}