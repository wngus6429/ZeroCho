{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport Head from \"next/head\";\nimport { useSelector } from \"react-redux\";\nimport Router from \"next/router\";\nimport { END } from \"redux-saga\";\nimport axios from \"axios\";\nimport useSWR from \"swr\";\nimport AppLayout from \"../components/AppLayout\";\nimport NicknameEditForm from \"../components/NicknameEditForm\";\nimport FollowList from \"../components/FollowList\";\nimport { LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\nimport wrapper from \"../store/configureStore\";\n\nconst fetcher = url => axios.get(url, {\n  withCredentials: true\n}).then(result => result.data);\n\nconst Profile = () => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    0: followersLimit,\n    1: setFollowersLimit\n  } = useState(3);\n  const {\n    0: followingsLimit,\n    1: setFollowingsLimit\n  } = useState(3);\n  const {\n    data: followersData,\n    error: followerError\n  } = useSWR(`http://localhost:3065/user/followers?limit=${followersLimit}`, fetcher);\n  const {\n    data: followingsData,\n    error: followingError\n  } = useSWR(`http://localhost:3065/user/followings?limit=${followingsLimit}`, fetcher); //fetcher가 이 주소에 대해 어떻게 가져올지 ㅋ , 앞에 data, error가 없으면 로딩중\n  //둘중 하나가 있으면 성공했거나 실패했거나\n\n  useEffect(() => {\n    if (!(me && me.id)) {\n      Router.push(\"/\");\n    }\n  }, [me && me.id]);\n  const loadMoreFollowings = useCallback(() => {\n    setFollowingsLimit(prev => prev + 3);\n  }, []);\n  const loadMoreFollowers = useCallback(() => {\n    setFollowersLimit(prev => prev + 3);\n  }, []);\n\n  if (!me) {\n    //로그인 안하면 profile페이지 못가게\n    return \"私の情報ローディング中\";\n  }\n\n  if (followerError || followingError) {\n    console.error(followerError || followingError);\n    return /*#__PURE__*/_jsx(\"div\", {\n      children: \"Following/Follower \\u30ED\\u30FC\\u30C7\\u30A3\\u30F3\\u30B0\\u4E2D\\u3001\\u30A8\\u30E9\\u30FC\\u304C\\u767A\\u751F\\u3057\\u307E\\u3057\\u305F\\u3002\"\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsx(\"title\", {\n        children: \"\\u79C1\\u306E\\u30D7\\u30ED\\u30D5\\u30A3\\u30FC\\u30EB\"\n      })\n    }), /*#__PURE__*/_jsxs(AppLayout, {\n      children: [/*#__PURE__*/_jsx(NicknameEditForm, {}), /*#__PURE__*/_jsx(FollowList, {\n        header: \"Following\",\n        data: followingsData,\n        onClickMore: loadMoreFollowings,\n        loading: !followingsData && !followingError\n      }), /*#__PURE__*/_jsx(FollowList, {\n        header: \"Follower\",\n        data: followersData,\n        onClickMore: loadMoreFollowers,\n        loading: !followersData && !followerError\n      })]\n    })]\n  });\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log(\"getServerSideProps start\");\n  console.log(\"context\", context); //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  const cookie = context.req ? context.req.headers.cookie : \"\"; //이걸 해야 서버쪽으로 쿠키가 전달이됨\n\n  axios.defaults.headers.Cookie = \"\"; //이걸 해야 서버쪽으로 쿠키가 전달이됨\n\n  if (context.req && cookie) {\n    //서버일때랑 쿠키가 있을때 , 이런게 아니면 위에 \"\" //이렇게 안하면 서버에서 쿠키가 공유되서 다른사람이 내 아이디로 로그인되는\n    axios.defaults.headers.Cookie = cookie;\n  } //저희가 실제로 쿠키를 써서 요청을 보낼때만 잠깐 쿠키를 넣어놧다가 쿠키를 안써서 요청보낼때는 서버에서 공유하고 있는 쿠키를 제거하는 이부분이 제일 중요\n  ////////////////////////////////////////////////////////////////////////////////////////\n\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch(END); //next redux wrapper에 이렇게 하라고 적혀있음\n\n  console.log(\"getServerSideProps end\");\n  await context.store.sagaTask.toPromise(); //이거는 configurestore에. sagaTask등록한거\n}); //서버사이드랜더링이 request가 success될떄까지 기다려주는거\n\nexport default Profile;","map":null,"metadata":{},"sourceType":"module"}